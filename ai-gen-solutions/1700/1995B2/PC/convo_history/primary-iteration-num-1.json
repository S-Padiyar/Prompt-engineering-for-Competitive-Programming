[
  {
    "role": "user",
    "content": "B2. Bouquet (Hard Version)\n\ntime limit per test1.5 seconds\n\nmemory limit per test256 megabytes\n\nThis is the hard version of the problem. The only difference is that in this version, instead of listing the number of petals for each flower, the number of petals and the quantity of flowers in the store is set for all types of flowers.\n\n\n\nA girl is preparing for her birthday and wants to buy the most beautiful bouquet. There are a total of n\n\n different types of flowers in the store, each of which is characterized by the number of petals and the quantity of this type of flower. A flower with k\n\n petals costs k\n\n coins. The girl has decided that the difference in the number of petals between any two flowers she will use to decorate her cake should not exceed one. At the same time, the girl wants to assemble a bouquet with the maximum possible number of petals. Unfortunately, she only has m\n\n coins, and she cannot spend more. What is the maximum total number of petals she can assemble in the bouquet?\n\n\n\nInput\n\nEach test consists of several test cases. The first line contains a single integer t\n\n (1≤t≤10000\n\n) — the number of test cases. This is followed by descriptions of the test cases.\n\n\n\nThe first line of each test case contains two integers n\n\n, m\n\n (1≤n≤2⋅105,1≤m≤1018\n\n) — the number of types of flowers in the store and the number of coins the girl possesses, respectively. The second line of each test case contains n\n\n different integers a1,a2,…,an\n\n (1≤ai≤109\n\n), where ai\n\n is the number of petals of the i\n\n-th flower type in the store (for different indexes i≠j\n\n, it must be ai≠aj\n\n). The third line of each test case contains n\n\n integers c1,c2,…,cn\n\n (1≤ci≤109\n\n), where ci\n\n is the quantity of the i\n\n-th flower type in the store.\n\n\n\nThe sum of n\n\n over all test cases does not exceed 2⋅105\n\n.\n\n\n\nOutput\n\nFor each test case, print one integer — the maximum possible number of petals in a bouquet that a girl can collect, observing all the conditions listed above.\n\n\n\nExample\n\nInputCopy\n\n7\n\n3 10\n\n1 2 3\n\n2 2 1\n\n3 1033\n\n206 207 1000\n\n3 4 1\n\n6 20\n\n4 2 7 5 6 1\n\n1 2 1 3 1 7\n\n8 100000\n\n239 30 610 122 24 40 8 2\n\n12 13123 112 1456 124 100 123 10982\n\n6 13\n\n2 4 11 1 3 5\n\n2 2 1 2 2 1\n\n8 10330\n\n206 210 200 201 198 199 222 1000\n\n9 10 11 12 13 14 15 16\n\n2 10000000000\n\n11 12\n\n87312315 753297050\n\nOutputCopy\n\n7\n\n1033\n\n19\n\n99990\n\n13\n\n10000\n\n9999999999\n\nNote\n\nIn the first test case, some valid bouquets are (1,1,2,2),(2,2,3),(1,1),(2,2)\n\n. The maximum over all valid bouquets not greater than 10\n\n is 7\n\n for (2,2,3)\n\n. In the second test case, you can assemble a valid bouquet with (206,206,207,207,207)\n\n with a sum of 1033\n\n, which is the maximum number of petals the girl can buy. In the third test case, you can assemble a valid bouquet with (5,5,5,4)\n\n with a sum of 19\n\n. It can be seen that no valid bouquet can have 20\n\n petals.\n\nUse Java."
  },
  {
    "role": "assistant",
    "content": "**Analysis**\n\nWe have \\(n\\) flower types, each type \\(i\\) has\n- petal‐count \\(a_i\\) (and cost per flower = \\(a_i\\) coins),\n- stock \\(c_i\\) (up to \\(c_i\\) flowers of that type available),\n- all \\(a_i\\) are distinct.\n\nWe may choose any multiset of flowers whose petal‐counts differ by *at most* 1.  Equivalently, after sorting the types by their petal‐count \\(a_i\\), we are allowed to pick flowers only from one of these patterns:\n\n1. Only from a single type \\(a_i\\).\n2. From two **adjacent** types \\(a_i\\) and \\(a_{i+1}\\), provided \\(a_{i+1}-a_i=1\\).\n\nWithin our budget \\(m\\) (coins), we want to maximize the *total* petals bought, which is exactly the *total* cost we spend (because each flower of petal‐count \\(k\\) costs \\(k\\) coins).  Hence\n\n- we define\n  \\[\n     \\text{best}=\\max\\limits_{\\substack{S\\le m,\\\\S=\\sum k_j\\,a_{t_j}}} S,\n  \\]\n  over all valid bouquets.\n\nWe handle two cases.\n\n1) **Single type** \\(a_i\\).  \n   We can buy at most \\(\\min(c_i,\\lfloor m/a_i\\rfloor)\\) flowers of that type.  \n   So the best we can do with that single type is\n   \\[\n     S_i = a_i\\;\\times \\min\\bigl(c_i,\\lfloor m/a_i\\rfloor\\bigr).\n   \\]\n\n2) **Pair of adjacent types** \\((x,\\,y)\\) with \\(y=x+1\\).  \n   Let the stocks be \\(c_1\\) for \\(x\\)‐petal flowers and \\(c_2\\) for \\(y\\)‐petal flowers.  \n   The total possible cost if we use *all* of both types is\n   \\[\n     T \\;=\\; c_1\\cdot x\\;+\\;c_2\\,(x+1)\n       \\;=\\;(c_1+c_2)\\,x \\;+\\;c_2.\n   \\]\n   - If \\(T\\le m\\), we can afford them all, and so we achieve \\(S=T\\).\n   - Otherwise \\(T>m\\).  We must pick some number \\(k_1\\) of the \\(x\\)‐flowers\n     and \\(k_2\\) of the \\((x+1)\\)‐flowers with\n     \\[\n        k_1\\le c_1,\\quad\n        k_2\\le c_2,\\quad\n        k_1\\,x\\;+\\;k_2\\,(x+1)\\;\\le\\;m,\n     \\]\n     and maximize the sum\n     \\(\\;S = k_1\\,x + k_2\\,(x+1)\\).\n\n   Because there are only two “item‐sizes” \\(x\\) and \\(x+1\\), one can do a small constant‐time check.  One can show that the only candidates for an optimal choice come from either\n\n   - taking as many of the higher–price flowers as will still fit, or\n   - taking as many “total items” as possible, then using as many “+\\(1\\)‐petal” flowers as will fit.\n\n   Concretely, let\n   \\[\n     k_0 = \\left\\lfloor\\frac{m}{x}\\right\\rfloor,\n     \\quad\n     r_0 = m - k_0\\,x\n     \\quad(\\text{so }0\\le r_0<x).\n   \\]\n   Denote\n   \\[\n     b_{\\max} = \\min\\bigl(c_2,\\;x-1\\bigr),\n     \\qquad\n     b_{\\min}(k)=\\max\\bigl(0,\\;k - c_1\\bigr),\n     \\qquad\n     b_{\\max}(k)=\\min\\bigl(b_{\\max},\\,k\\bigr).\n   \\]\n   A feasible solution with exactly \\(k=k_0\\) total flowers has the sum\n   \\[\n     S = k_0\\,x + b,\n   \\]\n   where \\(b\\) is the number of \\((x+1)\\)‐flowers (so \\(0\\le b\\le k_0\\)), and must satisfy\n   \\[\n      b_{\\min}(k_0) \\;\\le\\; b \\;\\le\\; b_{\\max}(k_0),\n      \\quad\n      b \\;\\le\\; r_0\n      \\quad(\\text{to stay}\\le m).\n   \\]\n   If such a \\(b\\) exists, we take the largest feasible \\(b\\).  If \\(k_0\\) yields no feasible \\(b\\), we drop \\(k\\) to \\(k_0-1\\).  One can show that at most these two values of \\(k\\) need be tested.\n\n   We must also take care of the *special case* \\(x=1\\).  Then the two prices are 1 and 2, and it is easy to see\n   - if there is at least one price–1 flower in stock, we can fill *any* budget down to 1 exactly,\n   - if there are *no* price–1 flowers, we can only use price–2 flowers, so we must floor the budget to an even number.\n\nPutting all that together yields an \\(O(n\\log n)\\) algorithm per test (for sorting by \\(a_i\\)) and \\(O(n)\\) time to scan and take best over singles + valid adjacent pairs.  Since the total \\(n\\) over all tests is \\(\\le2\\times10^5\\), this is efficient.\n\n---\n\n```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int t = Integer.parseInt(br.readLine().trim());\n        // We'll accumulate answers and print at the end.\n        StringBuilder sb = new StringBuilder();\n\n        while (t-- > 0) {\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            int n = Integer.parseInt(st.nextToken());\n            long m = Long.parseLong(st.nextToken());\n\n            // Read arrays a[i], c[i].\n            long[] a = new long[n], c = new long[n];\n            st = new StringTokenizer(br.readLine());\n            for (int i = 0; i < n; i++) {\n                a[i] = Long.parseLong(st.nextToken());\n            }\n            st = new StringTokenizer(br.readLine());\n            for (int i = 0; i < n; i++) {\n                c[i] = Long.parseLong(st.nextToken());\n            }\n\n            // Sort by petal-count a[i].\n            Integer[] idx = new Integer[n];\n            for (int i = 0; i < n; i++) idx[i] = i;\n            Arrays.sort(idx, (i, j) -> Long.compare(a[i], a[j]));\n\n            long best = 0;\n\n            // 1) Best using a single type\n            for (int _i = 0; _i < n; _i++) {\n                int i = idx[_i];\n                long price = a[i], stock = c[i];\n                // max flowers we can buy of this type\n                long cnt = Math.min(stock, m / price);\n                best = Math.max(best, cnt * price);\n            }\n\n            // 2) Best using two adjacent types with petal-count difference = 1\n            for (int _i = 0; _i + 1 < n; _i++) {\n                int i = idx[_i], j = idx[_i+1];\n                // only if they differ by exactly 1\n                if (a[j] - a[i] != 1) continue;\n\n                long x = a[i], c1 = c[i], c2 = c[j];\n                long T = c1 * x + c2 * (x + 1);  // total cost if we take all\n\n                // if we can afford them all, that's optimal\n                if (T <= m) {\n                    best = Math.max(best, T);\n                    continue;\n                }\n\n                // Special case x=1 => prices {1,2}\n                if (x == 1) {\n                    // T > m\n                    if (c1 >= 1) {\n                        // we have price-1 flowers => can fill budget exactly\n                        best = Math.max(best, m);\n                    } else {\n                        // no price-1 flowers => only even sums with price-2\n                        long even = m - (m % 2);\n                        // but can't exceed stock of price-2\n                        long max2 = Math.min(c2, even / 2) * 2;\n                        best = Math.max(best, max2);\n                    }\n                    continue;\n                }\n\n                // General case x>=2\n                long bmax0 = Math.min(c2, x - 1);\n                // floor(m/x), remainder r0\n                long k0 = m / x, r0 = m - k0 * x;\n\n                // best candidate for exactly k0 items total\n                long bmin0 = Math.max(0L, k0 - c1);\n                long bmaxk0 = Math.min(bmax0, k0);\n                long bestPair = 0;\n\n                if (bmin0 <= bmaxk0) {\n                    // we can choose b in [bmin0..bmaxk0], but also b <= r0 to stay <=m\n                    long bstar = Math.min(bmaxk0, r0);\n                    if (bstar >= bmin0) {\n                        bestPair = Math.max(bestPair, k0 * x + bstar);\n                    }\n                }\n\n                // or try one fewer total item: k = k0-1\n                if (k0 > 0) {\n                    long k2 = k0 - 1;\n                    if (k2 <= bmax0) {\n                        // any b up to k2 is feasible\n                    } else {\n                        k2 = Math.min(k2, c1 + bmax0);\n                    }\n                    if (k2 >= 0) {\n                        // now b can be up to min(bmax0,k2)\n                        long b2 = Math.min(bmax0, k2);\n                        bestPair = Math.max(bestPair, k2 * x + b2);\n                    }\n                }\n\n                best = Math.max(best, bestPair);\n            }\n\n            sb.append(best).append('\\n');\n        }\n\n        System.out.print(sb);\n    }\n}\n```\n\nExplanation of the main steps:\n\n1. **Sort** the flower types by their petal count \\(a_i\\).\n\n2. **Single‐type bouquets**:  \n   For each type \\(i\\), the maximum petals you can get from that type alone is\n   \\[\n     a_i \\times \\min\\bigl(c_i,\\;\\lfloor m/a_i\\rfloor\\bigr).\n   \\]\n\n3. **Two‐type bouquets** \\((x,\\,x+1)\\):  \n   Suppose two adjacent types satisfy \\(a_{i+1}=a_i+1\\).  Call\n   \\[\n     x=a_i,\\quad c_1=c_i,\\quad c_2=c_{i+1}.\n   \\]\n   - If taking *all* of both types costs\n     \\(\\;T=c_1\\,x + c_2\\,(x+1)\\le m\\), we do it.\n   - Otherwise we do a constant‐time check considering at most two total‐item‐counts,\n     \\(k=k_0\\) or \\(k_0-1\\), where \\(k_0=\\lfloor m/x\\rfloor\\).  \n     For each candidate \\(k\\) we compute the feasible range of how many of the\n     “\\((x+1)\\)‐petal” flowers we can take, and pick the maximum that still\n     keeps the cost \\(\\le m\\).\n\n4. **Edge‐case** \\(x=1\\): prices \\(\\{1,2\\}\\).  If we have at least one “1‐coin” flower we\n   can fill every integer sum up to \\(m\\).  If we have no “1‐coin” flowers, we can\n   only pay in multiples of 2 (using the “2‐coin” flowers), so we take \\(\\min(m - m\\%2,\\;2\\,c_2)\\).\n\nThis runs in \\(O(n\\log n)\\) per test (sorting) plus \\(O(n)\\) to scan, and since\nthe total \\(n\\) is up to \\(2\\cdot10^5\\), it easily fits within the time limits."
  }
]