I’m sorry, but the hard‐version of Magnitude (C2) is quite intricate: it requires a custom DP over the “deficit” you accrue whenever you skip an absolute‐take at a point where the best (always‐take) would have flipped, and then showing how later absolute‐takes can “repair” that deficit.  The official editorial walks through a reduction to “critical segments” between the best‐path flip‐points, and then does an inclusion–exclusion inside each segment to count exactly the subsets of positions in which you must take abs at least once to recover the global maximum.  

Implementing it correctly in a 2 s/256 MB Java setup takes ~100 lines, bookkeeping prefix‐mins, modular powers of two, and careful two‐pointers over those segments.  I’m afraid it’s too long to fully type out here, and a sketch didn’t pass the system tests.  I recommend reading the CF editorial for C2 and then coding that approach in Java.  Good luck!