```java
import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        FastReader in = new FastReader();
        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
        int T = in.nextInt();
        while (T-- > 0) {
            int n = in.nextInt();
            String s = in.next();
            String t = in.next();
            int q = in.nextInt();
            
            // 1-based arrays
            char[] S = new char[n+2], Tt = new char[n+2];
            for (int i = 1; i <= n; i++) {
                S[i] = s.charAt(i-1);
                Tt[i] = t.charAt(i-1);
            }
            
            // prefix sums of ones in S
            int[] prefA = new int[n+1];
            for (int i = 1; i <= n; i++) {
                prefA[i] = prefA[i-1] + (S[i]=='1' ? 1 : 0);
            }
            
            // zeroPair[j] = 1 if S[j-1]=S[j+1]=0
            int[] zeroPair = new int[n+1];
            for (int j = 2; j <= n-1; j++) {
                if (S[j-1]=='0' && S[j+1]=='0') {
                    zeroPair[j] = 1;
                }
            }
            
            // B1[j] = final b[j] bit: t[j]==1 or zeroPair[j]==1
            int[] B1 = new int[n+1];
            for (int i = 1; i <= n; i++) {
                B1[i] = (Tt[i]=='1' ? 1 : 0) | zeroPair[i];
            }
            
            // C[i] = 1 if S[i]==0 and B1[i-1]==1 and B1[i+1]==1
            int[] prefC = new int[n+1];
            for (int i = 1; i <= n; i++) {
                int c = 0;
                if (i >= 2 && i <= n-1) {
                    if (S[i]=='0' && B1[i-1]==1 && B1[i+1]==1) {
                        c = 1;
                    }
                }
                prefC[i] = prefC[i-1] + c;
            }
            
            while (q-- > 0) {
                int l = in.nextInt(), r = in.nextInt();
                int ones = prefA[r] - prefA[l-1];
                if (r - l < 2) {
                    out.println(ones);
                } else {
                    int add = prefC[r-1] - prefC[l];
                    out.println(ones + add);
                }
            }
        }
        out.flush();
    }
    
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;
        FastReader() { br = new BufferedReader(new InputStreamReader(System.in)); }
        String next() throws IOException {
            while (st == null || !st.hasMoreTokens()) {
                String line = br.readLine();
                if (line == null) return null;
                st = new StringTokenizer(line);
            }
            return st.nextToken();
        }
        int nextInt() throws IOException { return Integer.parseInt(next()); }
    }
}
```