**Analysis**

We have a string s of length n (2≤n≤2·10^5), and we must count all non‐empty strings t≠"a" such that one can cut s into pieces each equal to t or to the single character "a", using at least one piece equal to t.  We have up to 10^4 test‐cases and the total length of all s is ≤3·10^5, so we must solve each test in essentially O(n log n) or so.

---

**Key observations**:

1.  If s consists *entirely* of 'a' (i.e. no other letter), then **any** t that is a run of a's of length ≥2, ≤n will work: you simply use ⌊n/|t|⌋ copies of t and fill the remainder with single 'a's.  There are exactly n−1 such distinct t≠"a".  
   
2.  Otherwise let p₁<⋯<pₘ be the positions of the non‐'a' characters.  Then **every** valid t must cover all those positions (because we cannot cover a non‐'a' with single 'a'‐pieces).  

   We can split the valid t into two families:

   **(A) “One‐block” solutions.**  
   We use exactly one copy of t (of length L) to cover all non‐'a' positions; all the rest of the string is covered by 'a'‐pieces.  Concretely, the single t must start at some 0≤k≤p₁ and end at k+L−1≥pₘ, and of course k+L≤n.  One checks easily that the uncovered prefix (0…k−1) and suffix (k+L…n−1) are all 'a's by the definition of p₁ and pₘ.  
   
   It is a small arithmetic exercise to count how many pairs (k,L) do this:  
     Let x=p₁ and y=pₘ, then for each k=0…x we need L≥(y−k+1) and k+L≤n ⇒ L≤n−k.  Hence the number of ways is  
     ```
       A = ∑_{k=0..x} ( (n−k) − (y−k+1) + 1 )
         = ∑_{k=0..x} (n−y)
         = (x+1)*(n−y).
     ```
   Since p₁ and pₘ are fixed by s, we compute  
   ```
     A = (p₁ + 1) * ( n − pₘ ).
   ```

   **(B) “Multi‐block” solutions (L < d).**  
   Here d = pₘ−p₁+1 is the span of all non‐'a's.  If L<d we cannot cover them with one block of length L, so we must use several t‐blocks.  A simple “greedy” argument shows that there is *at most one* valid way to choose the starting positions of t‐blocks so as to just cover p₁…pₘ non‐overlappingly, namely:

     - Start at  
       k₀ = max( 0, p₁−L+1 ),  
       thus covering [k₀…k₀+L−1].  
     - Whenever the next non‐'a' position pᵢ lies beyond the end of the previous block, place the next block at  
       kᵢ = max( (prev_end+1), pᵢ−L+1 ).  

   We can check in O(#blocks) using a rolling‐hash that *all* such blocks spell out the *same* substring t of length L.  If they do, that gives one valid t of length L.  Hence for each L=1…d−1 we test “does this greedy cover succeed with all blocks equal?” and if so we add exactly +1 to our total.

Hence **Total =**  
```
  If s=="aaaa…a":   answer = n−1.
  Else
    x = p₁,  y = pₘ,  d = y−x+1
    A = (x+1)*(n−y)
    B = ∑_{L=1..d−1} [ does‐greedy(L)‐succeed ? 1 : 0 ]
    answer = A + B.
```

-  Computing A is O(1).
-  For B we do at most d≤n iterations.  In each iteration we do a small “greedy cover” over the m non‐'a' positions, but we skip entire runs of covered positions in one binary search each time we place a new block.  The total number of placed blocks over all L is roughly ∑_{L=1..n}(d/L)=O(n log n).  Each step does O(1) work (hash comparisons and binary‐search to skip), so total is O(n log n).  Since ∑n≤3·10⁵, this runs comfortably in two seconds in Java.

We use a 64‐bit rolling hash (mod 2^64) to compare substrings in O(1).

---

```java
import java.io.*;
import java.util.*;

public class Main {
    static final long BASE = 91138233;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter  pw = new PrintWriter(new OutputStreamWriter(System.out));
        int T = Integer.parseInt(br.readLine());
        
        // We will need powers of BASE up to the maximum total length ≤ 3e5
        int MAXN = 300_000 + 5;
        long[] pow = new long[MAXN];
        pow[0] = 1;
        for (int i = 1; i < MAXN; i++) {
            pow[i] = pow[i - 1] * BASE;  // mod 2^64 automatically
        }
        
        while (T-- > 0) {
            String s = br.readLine();
            int n = s.length();
            
            // Collect positions of non‐'a' characters
            List<Integer> posList = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                if (s.charAt(i) != 'a') {
                    posList.add(i);
                }
            }
            int m = posList.size();
            
            // Case 1: all 'a'
            if (m == 0) {
                // any t = "aa", "aaa", ..., "a"*n  (n−1 choices)
                pw.println(n - 1);
                continue;
            }
            
            // Build rolling hash of s
            long[] h = new long[n + 1];
            h[0] = 0;
            for (int i = 0; i < n; i++) {
                h[i + 1] = h[i] * BASE + (s.charAt(i));
            }
            
            // convenience to binary‐search on the posList
            int[] p = new int[m];
            for (int i = 0; i < m; i++) p[i] = posList.get(i);
            
            int x = p[0], y = p[m - 1];
            long A = (long)(x + 1) * (long)(n - y);  // one‐block solutions
            
            // Now the multi‐block solutions for L < d
            int d = y - x + 1;
            long B = 0;
            
            // for each L=1..d−1, try the greedy covering
            coverLoop:
            for (int L = 1; L < d; L++) {
                int idx = 0;
                int coveredEnd = -1;
                
                // We'll record the hash of the first block to compare
                long firstHash = 0;
                boolean     isFirst = true;
                
                while (idx < m) {
                    int pk = p[idx];
                    // we must start block so as to cover pk
                    int start = Math.max(coveredEnd + 1, pk - L + 1);
                    // if it doesn't actually cover pk or overruns the string, fail
                    if (start > pk || start + L > n) {
                        continue coverLoop;
                    }
                    // compute hash of s[start..start+L-1]
                    long thisHash = h[start + L] - h[start] * pow[L];
                    if (isFirst) {
                        firstHash = thisHash;
                        isFirst = false;
                    } else {
                        if (thisHash != firstHash) {
                            continue coverLoop;
                        }
                    }
                    // update covered-end
                    coveredEnd = start + L - 1;
                    // skip all p's now covered
                    // i.e. find first p[?]>coveredEnd
                    int lo = idx + 1, hi = m;
                    while (lo < hi) {
                        int mid = (lo + hi) >>> 1;
                        if (p[mid] <= coveredEnd) lo = mid + 1;
                        else                hi = mid;
                    }
                    idx = lo;
                }
                // if we exhausted all non-'a' positions, it's a valid L
                B++;
            }
            
            pw.println(A + B);
        }
        
        pw.flush();
    }
}
```

**Explanation of the main steps**

1.  **All‐'a' shortcut**  
    If the string is entirely `'a'`, any t of the form `"a"^L` with 2≤L≤n works, so the answer is **n−1**.

2.  **Identify non‐`'a'` positions**  
    Let them be p₁<…<pₘ.  If m≥1, any valid t must cover all these positions.

3.  **Single‐block coverings**  
    Any block of length L that begins at k≤p₁ and ends at k+L−1≥pₘ covers them in one piece; the formula shows there are  
    ```
      A = (p₁ + 1) * (n − pₘ)
    ```
    such (k,L).

4.  **Multi‐block coverings**  
    If L < d = pₘ−p₁+1, we cannot cover all non‐a in one piece; we place blocks greedily so as to cover them disjointly.  We only succeed for at most one pattern t of that length L (because we compare each new block’s hash against the first).  We check L = 1..d−1 in O(∑(d/L)·log m) ≈ O(n log n) total, accepting +1 for each L that passes.

Summing **A + B** gives the required count of distinct strings t≠"a" that work.