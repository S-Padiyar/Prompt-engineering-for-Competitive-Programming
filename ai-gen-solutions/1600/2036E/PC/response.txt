import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(in.readLine());
        int n = Integer.parseInt(st.nextToken());
        int k = Integer.parseInt(st.nextToken());
        int q = Integer.parseInt(st.nextToken());
        int[][] b = new int[k][n];
        for (int i = 0; i < n; i++) {
            st = new StringTokenizer(in.readLine());
            for (int j = 0; j < k; j++) {
                int aij = Integer.parseInt(st.nextToken());
                if (i == 0) {
                    b[j][0] = aij;
                } else {
                    b[j][i] = b[j][i - 1] | aij;
                }
            }
        }
        StringBuilder out = new StringBuilder();
        class BS {
            int lowerBound(int[] arr, int val) {
                int lo = 0, hi = arr.length;
                while (lo < hi) {
                    int mid = (lo + hi) >>> 1;
                    if (arr[mid] >= val) hi = mid;
                    else lo = mid + 1;
                }
                return lo;
            }
            int upperBound(int[] arr, int val) {
                int lo = 0, hi = arr.length;
                while (lo < hi) {
                    int mid = (lo + hi) >>> 1;
                    if (arr[mid] > val) hi = mid;
                    else lo = mid + 1;
                }
                return lo;
            }
        }
        BS bs = new BS();
        for (int _q = 0; _q < q; _q++) {
            int m = Integer.parseInt(in.readLine());
            int L = 0, R = n - 1;
            for (int t = 0; t < m; t++) {
                st = new StringTokenizer(in.readLine());
                int r = Integer.parseInt(st.nextToken()) - 1;
                char op = st.nextToken().charAt(0);
                int c = Integer.parseInt(st.nextToken());
                int[] col = b[r];
                if (op == '<') {
                    if (col[0] >= c) {
                        L = 1;
                        R = 0;
                    } else {
                        int pos = bs.lowerBound(col, c);
                        R = Math.min(R, pos - 1);
                    }
                } else {
                    if (col[n - 1] <= c) {
                        L = 1;
                        R = 0;
                    } else {
                        int pos = bs.upperBound(col, c);
                        L = Math.max(L, pos);
                    }
                }
            }
            if (L <= R) {
                out.append(L + 1).append('\n');
            } else {
                out.append(-1).append('\n');
            }
        }
        System.out.print(out);
    }
}