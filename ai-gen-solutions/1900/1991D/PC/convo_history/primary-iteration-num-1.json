[
  {
    "role": "user",
    "content": "D. Prime XOR Coloring\n\ntime limit per test2 seconds\n\nmemory limit per test256 megabytes\n\nYou are given an undirected graph with n\n\n vertices, numbered from 1\n\n to n\n\n. There is an edge between vertices u\n\n and v\n\n if and only if u⊕v\n\n is a prime number, where ⊕\n\n denotes the bitwise XOR operator.\n\n\n\nColor all vertices of the graph using the minimum number of colors, such that no two vertices directly connected by an edge have the same color.\n\n\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t\n\n (1≤t≤500\n\n). The description of test cases follows.\n\n\n\nThe only line contains a single integer n\n\n (1≤n≤2⋅105\n\n) — the number of vertices in the graph.\n\n\n\nIt is guaranteed that the sum of n\n\n over all test cases does not exceed 2⋅105\n\n.\n\n\n\nOutput\n\nFor each test case, output two lines.\n\n\n\nThe first line should contain a single integer k\n\n (1≤k≤n\n\n) — the minimum number of colors required.\n\n\n\nThe second line should contain n\n\n integers c1,c2,…,cn\n\n (1≤ci≤k\n\n) — the color of each vertex.\n\n\n\nIf there are multiple solutions, output any of them.\n\n\n\nExample\n\nInputCopy\n\n6\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\nOutputCopy\n\n1\n\n1\n\n2\n\n1 2\n\n2\n\n1 2 2\n\n3\n\n1 2 2 3\n\n3\n\n1 2 2 3 3\n\n4\n\n1 2 2 3 3 4\n\nNote\n\nIn the first test case, the minimum number of colors is 1\n\n, because there is only one vertex.\n\n\n\nIn the second test case, the minimum number of colors is 2\n\n, because there is an edge connecting 1\n\n and 2\n\n (1⊕2=3\n\n, which is a prime number).\n\n\n\nIn the third test case, the minimum number of colors is still 2\n\n, because 2\n\n and 3\n\n can be colored the same since there is no edge between 2\n\n and 3\n\n (2⊕3=1\n\n, which is not a prime number).\n\n\n\nIn the fourth test case, it can be shown that the minimum number of colors is 3\n\n.\n\n\n\nIn the fifth test case, it can be shown that the minimum number of colors is 3\n\n.\n\n\n\nIn the sixth test case, it can be shown that the minimum number of colors is 4\n\n.\n\nUse Java."
  },
  {
    "role": "assistant",
    "content": "**Analysis**\n\nWe have an undirected graph on vertices \\(1,2,\\dots,n\\).  Two vertices \\(u<v\\) are joined by an edge exactly when\n\\[\nu \\oplus v\n\\]\nis a prime number.  We wish to color the vertices with as few colors as possible so that no two adjacent vertices share a color.\n\nA key fact (shown by small‐\\(n\\) inspection and a “no large clique” argument in the official editorial) is that the largest clique in this “prime XOR” graph has size at most 4.  Indeed one finds\n\n- For \\(n=1\\), obviously \\(\\chi=1\\).\n- For \\(n=2\\) or \\(3\\), the largest clique has size 2 so \\(\\chi=2\\).\n- For \\(n=4\\) or \\(5\\), the largest clique has size 3 so \\(\\chi=3\\).\n- For all \\(n\\ge6\\), one can show a clique of size 4 already appears, and no clique of size 5 ever appears, so \\(\\chi=4\\).\n\nThus the _minimum_ number of colors \\(k\\) is\n\\[\nk=\\begin{cases}\n1,&n=1,\\\\\n2,&n=2,3,\\\\\n3,&n=4,5,\\\\\n4,&n\\ge6.\n\\end{cases}\n\\]\n\nIt remains to _construct_ such a coloring, i.e.\\ to assign each vertex \\(1\\le i\\le n\\) a color in \\(\\{1,2,\\dots,k\\}\\) so that if \\(u\\oplus v\\) is prime then the colors differ.\n\n1.  For the tiny cases \\(n\\le5\\), we can simply hard‐code a valid minimal coloring:\n   - \\(n=1\\): colors \\([1]\\).\n   - \\(n=2\\): colors \\([1,2]\\).\n   - \\(n=3\\): colors \\([1,2,2]\\).\n   - \\(n=4\\): colors \\([1,2,2,3]\\).\n   - \\(n=5\\): colors \\([1,2,2,3,3]\\).\n\n2.  For all \\(n\\ge6\\), we claim a simple 4‐coloring by residue mod 4 suffices.  Namely define\n   \\[\n   c(i) \\;=\\;\n   \\begin{cases}\n     1,&i\\!\\bmod4=1,\\\\\n     2,&i\\!\\bmod4=2,\\\\\n     3,&i\\!\\bmod4=3,\\\\\n     4,&i\\!\\bmod4=0.\n   \\end{cases}\n   \\]\n   Why does this avoid monochromatic edges?  If two vertices \\(u,v\\) have the same color, then \\(u\\equiv v\\pmod4\\), whence\n   \\[\n     u\\oplus v\n     \\;=\\; (u\\bmod4)\\oplus(v\\bmod4)\n     \\;\\equiv\\;0\\pmod4.\n   \\]\n   But the only prime congruent to \\(0\\pmod4\\) would be 2 (and \\(2\\equiv2\\pmod4\\), not 0), so \\(u\\oplus v\\) cannot be prime.  Thus no same‐color pair is adjacent.  This uses exactly 4 colors, which is minimal for \\(n\\ge6\\).\n\nOverall we get an \\(O(n)\\) procedure per test.  Since \\(\\sum n\\le2\\cdot10^5\\), this runs easily in the time limits.\n\n---\n\n```java\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int t = Integer.parseInt(br.readLine().trim());\n        StringBuilder sb = new StringBuilder();\n        while (t-- > 0) {\n            int n = Integer.parseInt(br.readLine().trim());\n            if (n == 1) {\n                sb.append(1).append('\\n');\n                sb.append(1).append('\\n');\n            } else if (n == 2) {\n                sb.append(2).append('\\n');\n                sb.append(\"1 2\").append('\\n');\n            } else if (n == 3) {\n                sb.append(2).append('\\n');\n                sb.append(\"1 2 2\").append('\\n');\n            } else if (n == 4) {\n                sb.append(3).append('\\n');\n                sb.append(\"1 2 2 3\").append('\\n');\n            } else if (n == 5) {\n                sb.append(3).append('\\n');\n                sb.append(\"1 2 2 3 3\").append('\\n');\n            } else {\n                // n >= 6\n                sb.append(4).append('\\n');\n                // color by i mod 4: residues 1->1,2->2,3->3,0->4\n                for (int i = 1; i <= n; i++) {\n                    int r = i % 4;\n                    int c = (r == 0 ? 4 : r);\n                    sb.append(c).append(' ');\n                }\n                sb.append('\\n');\n            }\n        }\n        System.out.print(sb);\n    }\n}\n```\n\nExplanation of the key steps:\n\n1. **Chromatic number by small‐case analysis.**  One checks directly (or by a short computer‐aid argument) that\n   - up to \\(n=5\\) the graph's largest clique has size \\(\\chi\\in\\{1,2,3\\}\\) as listed above,\n   - for every \\(n\\ge6\\) a clique of size 4 already appears, and no clique of size 5 can ever appear, so \\(\\chi=4\\).\n\n2. **Explicit colorings.**  \n   - For \\(n\\le5\\) we simply hard‐code minimal colorings found by inspection.\n   - For \\(n\\ge6\\) we use the 4‐coloring \\(c(i)=\\bigl[(i\\!\\bmod4)==0?4:(i\\!\\bmod4)\\bigr]\\).  \n     Two vertices of the same color share the same residue mod 4, so their bit‐wise XOR is a multiple of 4, hence not prime (no prime exceeds 2 can be divisible by 4, and \\(2\\not\\equiv0\\pmod4\\)).\n\nThis runs in \\(O(n)\\) per test, easily handling up to \\(2\\times10^5\\) total vertices."
  }
]