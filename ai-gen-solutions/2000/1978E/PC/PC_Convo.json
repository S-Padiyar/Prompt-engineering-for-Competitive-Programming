[
  {
    "timestamp": "2025-07-24T05:53:21.811169",
    "role": "user",
    "content": "Please provide a clean, self-contained Java solution in one code block (a single Main class) that reads input, processes all test cases, and prints the answers, without extra explanation."
  },
  {
    "timestamp": "2025-07-24T05:54:31.822263",
    "role": "assistant",
    "content": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        FastReader in = new FastReader();\n        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));\n        int T = in.nextInt();\n        while (T-- > 0) {\n            int n = in.nextInt();\n            String s = in.next();\n            String t = in.next();\n            int q = in.nextInt();\n            \n            // 1-based arrays\n            char[] S = new char[n+2], Tt = new char[n+2];\n            for (int i = 1; i <= n; i++) {\n                S[i] = s.charAt(i-1);\n                Tt[i] = t.charAt(i-1);\n            }\n            \n            // prefix sums of ones in S\n            int[] prefA = new int[n+1];\n            for (int i = 1; i <= n; i++) {\n                prefA[i] = prefA[i-1] + (S[i]=='1' ? 1 : 0);\n            }\n            \n            // zeroPair[j] = 1 if S[j-1]=S[j+1]=0\n            int[] zeroPair = new int[n+1];\n            for (int j = 2; j <= n-1; j++) {\n                if (S[j-1]=='0' && S[j+1]=='0') {\n                    zeroPair[j] = 1;\n                }\n            }\n            \n            // B1[j] = final b[j] bit: t[j]==1 or zeroPair[j]==1\n            int[] B1 = new int[n+1];\n            for (int i = 1; i <= n; i++) {\n                B1[i] = (Tt[i]=='1' ? 1 : 0) | zeroPair[i];\n            }\n            \n            // C[i] = 1 if S[i]==0 and B1[i-1]==1 and B1[i+1]==1\n            int[] prefC = new int[n+1];\n            for (int i = 1; i <= n; i++) {\n                int c = 0;\n                if (i >= 2 && i <= n-1) {\n                    if (S[i]=='0' && B1[i-1]==1 && B1[i+1]==1) {\n                        c = 1;\n                    }\n                }\n                prefC[i] = prefC[i-1] + c;\n            }\n            \n            while (q-- > 0) {\n                int l = in.nextInt(), r = in.nextInt();\n                int ones = prefA[r] - prefA[l-1];\n                if (r - l < 2) {\n                    out.println(ones);\n                } else {\n                    int add = prefC[r-1] - prefC[l];\n                    out.println(ones + add);\n                }\n            }\n        }\n        out.flush();\n    }\n    \n    static class FastReader {\n        BufferedReader br;\n        StringTokenizer st;\n        FastReader() { br = new BufferedReader(new InputStreamReader(System.in)); }\n        String next() throws IOException {\n            while (st == null || !st.hasMoreTokens()) {\n                String line = br.readLine();\n                if (line == null) return null;\n                st = new StringTokenizer(line);\n            }\n            return st.nextToken();\n        }\n        int nextInt() throws IOException { return Integer.parseInt(next()); }\n    }\n}\n```"
  }
]