**Analysis**

We have an array a₁,…,aₙ and may permute it arbitrarily.  We want to minimize

    S = gcd(p₁)
      + gcd(p₁,p₂)
      + ⋯
      + gcd(p₁,p₂,…,pₙ)

where p is our chosen permutation of a.  Notice that the sequence of prefix‐gcds is nonincreasing, and we want it to drop as quickly as possible (so that the sum is small).

A natural greedy algorithm is:

1. Let `cur = 0` (so `gcd(0,x)=x`).
2. Repeatedly pick an unused element `a[j]` that **minimizes** `g = gcd(cur, a[j])`.
3. Set `cur = g`, mark `a[j]` used, add `g` to the answer.
4. Stop early if:
   - We ever get `cur = 1`: then every further prefix‐gcd is 1, so we can just add `1*(#remaining)` and break.
   - Or we find that the best‐possible gcd in an iteration is `g == cur` again: that means we cannot reduce the gcd any further, so every remaining element will also give prefix‐gcd `cur`, so we add `cur*(#remaining)` and break.

Since each time through the loop we either strictly decrease `cur` or we break, there are at most \(O(\tau(\max a_i))\) iterations before stopping (where \(\tau\) is the divisor‐count function, typically ≤100 for numbers up to \(10^5\)).  Each iteration scans the unused elements once, so the total work per test is \(O(n\cdot \tau(\max a_i))\).  As the sum of all \(n\) across test cases is at most \(10^5\), this passes easily in Java.

---

```java
import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader in;
    static PrintWriter out;

    // compute gcd(a,b)
    static int gcd(int a, int b) {
        while (b != 0) {
            int t = a % b;
            a = b;
            b = t;
        }
        return a;
    }

    public static void main(String[] args) throws IOException {
        in = new BufferedReader(new InputStreamReader(System.in));
        out = new PrintWriter(System.out);

        int t = Integer.parseInt(in.readLine().trim());
        while (t-- > 0) {
            int n = Integer.parseInt(in.readLine().trim());
            StringTokenizer st = new StringTokenizer(in.readLine());
            int[] a = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = Integer.parseInt(st.nextToken());
            }

            boolean[] used = new boolean[n];
            int usedCount = 0;
            long ans = 0;

            int cur = 0;  // the gcd of the prefix so far

            // We will pick elements until we either
            //  1) get cur=1, or
            //  2) find that gcd(cur, bestNext) == cur again,
            //     meaning no further reduction is possible.
            mainLoop:
            while (usedCount < n) {
                int bestG = Integer.MAX_VALUE;
                int bestIdx = -1;
                // scan for the element that minimizes gcd(cur, a[j])
                for (int j = 0; j < n; j++) {
                    if (used[j]) continue;
                    int g = gcd(cur, a[j]);
                    if (g < bestG) {
                        bestG = g;
                        bestIdx = j;
                        if (bestG == 1) break;  // can't do better
                    }
                }

                int rem = n - usedCount;  // how many are left

                // if the best we can do is keep cur the same, we break
                // adding cur*rem to the answer
                if (bestG == cur) {
                    ans += (long) cur * rem;
                    break;
                }

                // otherwise we pick that element
                ans += bestG;
                cur = bestG;
                used[bestIdx] = true;
                usedCount++;

                // if we have achieved cur=1, all remaining will contribute 1
                if (cur == 1) {
                    ans += (long) 1 * (n - usedCount);
                    break;
                }
            }

            out.println(ans);
        }

        out.flush();
    }
}
```

**Explanation of Key Steps**

1. **cur = 0**  
   We exploit the fact that gcd(0, x) = x, so at the very first step we are effectively picking the smallest element in the entire array (since we want to minimize gcd(0,x)=x).

2. **Greedy pick**  
   At each iteration we scan the unused elements and choose the one that gives the smallest gcd with the current prefix‐gcd (`cur`).  This forces the prefix‐gcd to drop as rapidly as possible, minimizing the sum of all prefix‐gcds.

3. **Early break**  
   - If we ever reach `cur = 1`, then any further gcd(1, x) = 1, so we just add `1` for each of the remaining elements and stop.  
   - If in an iteration we find that the best gcd we can achieve is `bestG == cur` (no improvement), then it will never go down further.  All remaining elements will contribute exactly `cur` to every subsequent prefix‐gcd, so we add `cur*(#remaining)` and stop.

This runs in \(O\bigl(n\cdot \tau(\max a_i)\bigr)\) per test, which is fast enough under the given constraints.