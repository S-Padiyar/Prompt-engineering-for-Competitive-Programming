[
  {
    "timestamp": "2025-07-24T06:03:15.588714",
    "role": "user",
    "content": "Please re-output just the Java solution code as a single block without any markdown fences or extra explanation, ready for submission."
  },
  {
    "timestamp": "2025-07-24T06:05:09.045240",
    "role": "assistant",
    "content": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int t = Integer.parseInt(in.readLine().trim());\n        final char[] PAT = {'n', 'a', 'r', 'e', 'k'};\n        final int NEG_INF = -1_000_000_000;\n        StringBuilder output = new StringBuilder();\n        while (t-- > 0) {\n            String[] nm = in.readLine().split(\" \");\n            int n = Integer.parseInt(nm[0]), m = Integer.parseInt(nm[1]);\n            int[] dp = new int[5];\n            for (int s = 1; s < 5; s++) dp[s] = NEG_INF;\n            dp[0] = 0;\n            for (int i = 0; i < n; i++) {\n                String sline = in.readLine();\n                char[] S = sline.toCharArray();\n                int T = 0;\n                for (char c : S) {\n                    for (char pch : PAT) {\n                        if (c == pch) { T++; break; }\n                    }\n                }\n                int[] qCnt = new int[5], sOut = new int[5];\n                for (int s0 = 0; s0 < 5; s0++) {\n                    int state = s0, cnt = 0;\n                    for (char c : S) {\n                        if (c == PAT[state]) {\n                            state++;\n                            if (state == 5) {\n                                cnt++;\n                                state = 0;\n                            }\n                        }\n                    }\n                    qCnt[s0] = cnt;\n                    sOut[s0] = state;\n                }\n                int[] newDp = new int[5];\n                for (int s = 0; s < 5; s++) newDp[s] = dp[s];\n                for (int s0 = 0; s0 < 5; s0++) {\n                    if (dp[s0] == NEG_INF) continue;\n                    int got = dp[s0] + 10 * qCnt[s0] - T;\n                    int s1 = sOut[s0];\n                    newDp[s1] = Math.max(newDp[s1], got);\n                }\n                dp = newDp;\n            }\n            int ans = 0;\n            for (int s = 0; s < 5; s++) ans = Math.max(ans, dp[s]);\n            output.append(ans).append('\\n');\n        }\n        System.out.print(output);\n    }\n}"
  }
]