**Analysis**

We have an array of positive integers \(a_1,a_2,\dots,a_n\).  We may choose any index \(i\) and replace 
\[
  a_i \;\longleftarrow\; (a_i)^2
\]
as many times as we like (each “squaring” counts as one operation).  We wish, after some sequence of such operations, to have a non‐decreasing array
\[
  b_1\le b_2\le \dots\le b_n,
\]
where \(b_i\) is the final value of \(a_i\).  We want the *minimum* total number of squarings, or report \(-1\) if it cannot be made non‐decreasing.

---

**Key observations**

1.  **Squaring only increases** (or leaves unchanged, in the case \(a_i=1\)) each entry:
   \[
     a_i\;\longmapsto\;(a_i)^2\;\ge\;a_i.
   \]
   Hence, once we raise an entry, it never drops back down.

2.  To make the final array \(b\) non‐decreasing, it suffices to insist
   \[
     b_i \;\ge\; b_{i-1}\quad\text{for }i=2,\dots,n.
   \]
   Since each \(b_i\) must be some \((a_i)^{2^{\,k_i}}\), we only ever need to compare \(b_i\) to the immediately preceding value \(b_{i-1}\).

3.  A natural greedy strategy: process left to right, keeping track of the current value  
   \[
     \text{prev} = b_{i-1},
   \]
   and for the next \(a_i\) choose the *smallest* number \(k_i\) of squarings so that
   \[
     (a_i)^{2^{\,k_i}}\;\ge\;\text{prev}.
   \]
   -  If \(a_i\ge\text{prev}\) already, then \(k_i=0\).
   -  If \(a_i=1<\text{prev}\), no matter how many times you square it it stays 1, so it is *impossible*.
   -  Otherwise, \(a_i>1\).  We need the smallest \(k\) such that
     \[
       \underbrace{(a_i)\;2\hbox{-fold power}\;\cdots\;2\text{ times}}_{2^k\text{th power}}
       = (a_i)^{2^k}\;\ge\;\text{prev}.
     \]
     Equivalently in logarithms (say \(\log=\ln\)) we want
     \[
       2^k\;\ln(a_i)\;\ge\;\ln(\text{prev})
       \quad\Longleftrightarrow\quad
       (\ln(a_i))\;2^k\;\ge\;\ln(\text{prev}).
     \]
     We can keep both sides in floating‐point:
     - Maintain \(\displaystyle P=\ln(\text{prev})\).
     - Let \(c=\ln(a_i)\).
     - If \(c\ge P\), no squaring needed.
     - Else repeatedly double \(c\mapsto 2c\) until \(c\ge P\).  The number of doublings is exactly the number of squarings \(k_i\).

   After that, we set
   \[
     \text{prev}\;=\;(a_i)^{2^{k_i}},
   \]
   but in the code we simply keep 
   \[
     P \;=\; \ln\bigl((a_i)^{2^{k_i}}\bigr)
           \;=\;2^{k_i}\,\ln(a_i)\;=\;\text{(the doubled‐up }c\text{)}.
   \]

4.  Each squaring step (doubling \(c\)) takes \(O(1)\) time, and the total number of squarings across the entire array is the answer.  In the worst case each element might require up to, say, 50 squarings (in practice much less), and \(n\) is up to \(2\cdot10^5\).  A simple left‐to‐right pass with a small inner loop easily runs in time.

---

**Solution Code (Java)**

```java
import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out = new PrintWriter(System.out);

        int t = Integer.parseInt(br.readLine().trim());
        final double EPS = 1e-12;

        while (t-- > 0) {
            int n = Integer.parseInt(br.readLine().trim());
            StringTokenizer st = new StringTokenizer(br.readLine());
            int[] a = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = Integer.parseInt(st.nextToken());
            }

            // prevLog = ln of the previous array value b[i-1].
            double prevLog = Math.log(a[0]);
            long ops = 0;
            boolean ok = true;

            for (int i = 1; i < n; i++) {
                double curLog = Math.log(a[i]);
                // If already non-decreasing, no ops needed
                if (curLog + EPS >= prevLog) {
                    prevLog = curLog;
                } else {
                    // If a[i]==1 but prevLog>0 => impossible
                    if (a[i] == 1) {
                        ok = false;
                        break;
                    }
                    // Otherwise keep squaring a[i] until its log >= prevLog
                    double tlog = curLog;
                    int cnt = 0;
                    while (tlog + EPS < prevLog) {
                        tlog *= 2.0;
                        cnt++;
                    }
                    ops += cnt;
                    prevLog = tlog;
                }
            }

            out.println(ok ? ops : -1);
        }

        out.flush();
    }
}
```

**Explanation of the Main Steps**

1.  We read \(t\) test‐cases.
2.  For each test:  
    - Read \(n\) and the array \(a[0\dots n-1]\).  
    - Initialize  
       \(\displaystyle\text{prevLog} = \ln(a[0])\),  
       `ops = 0`,  
       `ok = true`.  
    - Walk through \(i=1\) to \(n-1\):  
      * Compute `curLog = ln(a[i])`.  
      * If `curLog >= prevLog` (within a tiny epsilon), no squaring is needed, we just set `prevLog = curLog`.  
      * Otherwise, if `a[i] == 1`, it can never catch up (since \(1^2=1\)), so we mark `ok=false` and break.  
      * Else we repeatedly do `tlog *= 2.0; cnt++;` until `tlog >= prevLog`.  Each doubling corresponds to one squaring of the integer \(a[i]\).  We accumulate `cnt` into `ops`, and set `prevLog = tlog`.  
3.  If we ever detect impossibility (`ok==false`), we print `-1`.  Otherwise, we print the total `ops`.

This runs in \(O(n\cdot K)\) per test (where \(K\) is the number of squaring‐doubles, in practice tiny, say \(\le50\)), very fast for total \(n\le2\times10^5\).