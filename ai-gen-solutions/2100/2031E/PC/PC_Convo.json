[
  {
    "timestamp": "2025-07-24T06:15:19.839791",
    "role": "user",
    "content": "Please provide a single, self-contained Java source code implementation (one code block only, with no extra explanation) that solves the problem as specified."
  },
  {
    "timestamp": "2025-07-24T06:16:23.395264",
    "role": "assistant",
    "content": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static final int MAXN = 1000000 + 5;\n    static int[] head = new int[MAXN], to = new int[MAXN], nxt = new int[MAXN];\n    static int[] deg = new int[MAXN], dp = new int[MAXN];\n    static int ecnt;\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder out = new StringBuilder();\n        int t = Integer.parseInt(br.readLine().trim());\n        while (t-- > 0) {\n            int n = Integer.parseInt(br.readLine().trim());\n            for (int i = 1; i <= n; i++) {\n                head[i] = -1;\n                deg[i] = 0;\n            }\n            ecnt = 0;\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            for (int v = 2; v <= n; v++) {\n                int p = Integer.parseInt(st.nextToken());\n                to[ecnt] = v;\n                nxt[ecnt] = head[p];\n                head[p] = ecnt++;\n                deg[p]++;\n            }\n            for (int v = n; v >= 1; v--) {\n                int k = deg[v];\n                if (k == 0) {\n                    dp[v] = 0;\n                } else if (k == 1) {\n                    int c = to[head[v]];\n                    dp[v] = dp[c] + 1;\n                } else {\n                    int[] D = new int[k];\n                    int idx = 0;\n                    for (int e = head[v]; e != -1; e = nxt[e]) {\n                        D[idx++] = dp[to[e]];\n                    }\n                    Arrays.sort(D);\n                    int best = 0;\n                    for (int i = 1; i <= k; i++) {\n                        int childDp = D[k - i];\n                        int temp = childDp - 1 + ceilLog2(i + 2);\n                        if (temp > best) best = temp;\n                    }\n                    dp[v] = best;\n                }\n            }\n            out.append(dp[1]).append('\\n');\n        }\n        System.out.print(out);\n    }\n    static int ceilLog2(int x) {\n        int f = 31 - Integer.numberOfLeadingZeros(x);\n        return ((x & (x - 1)) == 0) ? f : (f + 1);\n    }\n}\n```"
  }
]