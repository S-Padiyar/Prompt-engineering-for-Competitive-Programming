[
  {
    "timestamp": "2025-07-24T06:24:48.961819",
    "role": "user",
    "content": "Please provide only a single, self‚Äêcontained Java code block (including imports, class, main method, and fast I/O) that correctly solves the problem within the required time limits, without any additional explanation or text outside the code."
  },
  {
    "timestamp": "2025-07-24T06:25:28.112941",
    "role": "assistant",
    "content": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        FastInput in = new FastInput();\n        FastOutput out = new FastOutput();\n        int n = in.nextInt(), Q = in.nextInt();\n        int[] A = new int[n];\n        for (int i = 0; i < n; i++) A[i] = in.nextInt();\n        final int TH = 64;\n        int[] tmp = new int[TH];\n        while (Q-- > 0) {\n            int l = in.nextInt() - 1, r = in.nextInt() - 1;\n            int len = r - l + 1;\n            if (len > TH) {\n                out.println(\"YES\");\n                continue;\n            }\n            for (int i = 0; i < len; i++) tmp[i] = A[l + i];\n            Arrays.sort(tmp, 0, len);\n            ArrayList<Long> masks = new ArrayList<>();\n            for (int i = 0; i < len; i++) {\n                for (int j = i + 1; j < len; j++) {\n                    long sum = (long) tmp[i] + tmp[j];\n                    for (int k = j + 1; k < len && tmp[k] < sum; k++) {\n                        masks.add((1L << i) | (1L << j) | (1L << k));\n                    }\n                }\n            }\n            boolean ok = false;\n            int M = masks.size();\n            for (int i = 0; i < M && !ok; i++) {\n                long m1 = masks.get(i);\n                for (int j = i + 1; j < M; j++) {\n                    if ((m1 & masks.get(j)) == 0) {\n                        out.println(\"YES\");\n                        ok = true;\n                        break;\n                    }\n                }\n            }\n            if (!ok) out.println(\"NO\");\n        }\n        out.flush();\n    }\n\n    static class FastInput {\n        BufferedInputStream in = new BufferedInputStream(System.in);\n        byte[] buf = new byte[1 << 20];\n        int pos, len;\n        int read() throws IOException {\n            if (pos == len) {\n                pos = 0;\n                len = in.read(buf);\n                if (len < 0) return -1;\n            }\n            return buf[pos++] & 0xFF;\n        }\n        int nextInt() throws IOException {\n            int c, x = 0;\n            do { c = read(); if (c < 0) return -1; }\n            while (c != '-' && (c < '0' || c > '9'));\n            boolean neg = (c == '-');\n            if (neg) c = read();\n            for (; c >= '0' && c <= '9'; c = read()) x = x * 10 + (c - '0');\n            return neg ? -x : x;\n        }\n    }\n\n    static class FastOutput {\n        BufferedOutputStream out = new BufferedOutputStream(System.out);\n        void println(String s) throws IOException {\n            out.write(s.getBytes());\n            out.write('\\n');\n        }\n        void flush() throws IOException {\n            out.flush();\n        }\n    }\n}\n```"
  }
]