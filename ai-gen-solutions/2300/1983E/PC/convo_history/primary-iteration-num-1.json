[
  {
    "role": "user",
    "content": "E. I Love Balls\n\ntime limit per test2 seconds\n\nmemory limit per test256 megabytes\n\nAlice and Bob are playing a game. There are n\n\n balls, out of which k\n\n are special. Each ball has a value associated with it.\n\n\n\nThe players play turn by turn. In each turn, the player randomly picks a ball and adds the value of the ball to their score, which is 0\n\n at the beginning of the game. The selected ball is removed from the game. If the ball was special, the same player takes the next turn if at least one ball is remaining. If the ball picked was not special, the next player plays their turn.\n\n\n\nThey play this game until no balls are remaining in the game. Alice plays first.\n\n\n\nFind the expected score that both the players have at the end of the game modulo 109+7\n\n.\n\n\n\nFormally, let M=109+7\n\n. It can be shown that the answer can be expressed as an irreducible fraction pq\n\n, where p\n\n and q\n\n are integers and q≢0(modM)\n\n. Output the integer equal to p⋅q−1modM\n\n. In other words, output such an integer x\n\n that 0≤x<M\n\n and x⋅q≡p(modM)\n\n.\n\n\n\nInput\n\nThere are multiple test cases. The first line of the input contains an integer t\n\n, the number of test cases (1≤t≤2⋅105\n\n).\n\n\n\nEach test case description is on a new line. The first line of the test case contains two integers n\n\n and k\n\n in the respective order separated by a space (1≤k≤n≤4⋅105\n\n).\n\n\n\nThe second line of the test case contains n\n\n integers: v1,v2,…,vn\n\n, the value for each ball separated by spaces. The first k\n\n balls are special (1≤vi≤107\n\n).\n\n\n\nThe sum of n\n\n over all test cases does not exceed 5⋅105\n\n.\n\n\n\nOutput\n\nOutput two integers per test case in a new line, the expected score of Alice and the expected score of Bob modulo 109+7\n\n.\n\n\n\nExamples\n\nInputCopy\n\n1\n\n5 2\n\n10 20 5 15 25\n\nOutputCopy\n\n45 30\n\nInputCopy\n\n5\n\n1 1\n\n732507\n\n2 2\n\n5817860 5398510\n\n5 1\n\n2122894 4951549 2750585 7821535 3214167\n\n8 4\n\n1405323 5069867 6883092 6972029 328406 2478975 7628890 9973340\n\n4 2\n\n9662050 3566134 3996473 9872255\n\nOutputCopy\n\n732507 0\n\n11216370 0\n\n810642660 210218077\n\n722402997 318336932\n\n349086489 678010430\n\nInputCopy\n\n5\n\n3 3\n\n1095611 8219204 7773462\n\n2 1\n\n8176490 2774103\n\n3 1\n\n9178636 5138057 3367761\n\n12 9\n\n7597698 6843019 2298534 1522386 4969588 1340345 3967362 9152890 6689668 9986080 4745473 7407325\n\n10 5\n\n6986368 2397882 5804127 6980694 3740836 3215836 5195724 3179261 4136769 4544231\n\nOutputCopy\n\n17088277 0\n\n6862348 4088245\n\n677038671 340645790\n\n36949997 29570371\n\n725118051 321063684\n\nNote\n\nIn the first test case, Alice's expected score is 45\n\n, and Bob's is 30\n\n at the end of the game.\n\nUse Java."
  },
  {
    "role": "assistant",
    "content": "**Analysis**\n\nWe have \\(n\\) balls, of which the first \\(k\\) are *special* and the remaining \\(m=n-k\\) are *normal*.  Each ball \\(i\\) carries a (given) value \\(v_i\\).  Alice and Bob take turns drawing balls (until none remain), starting with Alice, with the rule that whenever a *special* ball is drawn the same player goes again, but whenever a *normal* ball is drawn the turn switches.\n\nWe wish to compute\n\\[\n   E[\\text{Alice's score}]\n   \\;=\\;\n   \\sum_{i=1}^n v_i \\cdot \\Pr(\\text{Alice draws ball }i),\n\\]\nand similarly Bob's expected score.  Linearity of expectation lets us split the sum over *special* and *normal* balls; moreover by symmetry all specials behave identically (and all normals likewise).  Thus if\n\n  * \\(\\Sigma_s = \\sum_{i=1}^k v_i\\)\n  * \\(\\Sigma_n = \\sum_{i=k+1}^n v_i\\)\n\nand if \n\\[\n   p_s \\;=\\;\\Pr(\\text{Alice draws any given special}),\\qquad\n   p_n \\;=\\;\\Pr(\\text{Alice draws any given normal}),\n\\]\nthen\n\\[\n   E_A \\;=\\;\\Sigma_s\\,p_s \\;+\\;\\Sigma_n\\,p_n.\n\\]\nSince Bob gets the remainder,\n\\[\n   E_B \\;=\\;(\\Sigma_s+\\Sigma_n)-E_A.\n\\]\n\n---\n\n### Counting how many specials/normals Alice draws in expectation\n\nOne can show by a *runs*-argument that\n\n 1. Let \\(m=n-k\\).  The *normal* balls split the drawing‐permutation into \\(m+1\\) “bins” of consecutive specials, of which Alice will own the bins numbered \\(0,2,4,\\dots\\).  Equivalently Alice draws exactly\n \\[\n    \\Bigl\\lceil \\tfrac m2\\Bigr\\rceil\n \\]\n normals (no randomness there), so\n \\[\n    E[\\#\\text{normals by Alice}]\n        \\;=\\;\\Bigl\\lceil \\tfrac m2\\Bigr\\rceil.\n \\]\n\n 2. The total \\(k\\) specials are placed uniformly at random into those \\(m+1\\) bins, and exactly the “even”‐numbered bins go to Alice (bins \\(0,2,4,\\dots\\)).  There are\n \\[\n     \\Bigl\\lfloor \\tfrac m2\\Bigr\\rfloor+1\n     \\quad\n     (\\text{the bins }0,2,\\dots)\n \\]\n of them, out of the \\(m+1\\) total bins.  Hence in expectation Alice gets\n \\[\n    E[\\#\\text{specials by Alice}]\n      =k\\;\\times\\;\\frac{\\lfloor \\tfrac m2\\rfloor+1}{m+1}.\n \\]\n\nHence\n\\[\n   p_n \\;=\\;\\frac{E[\\#\\text{normals by Alice}]}{m}\n           \\;=\\;\\frac{\\lceil m/2\\rceil}{m},\n   \\quad\n   p_s \\;=\\;\\frac{E[\\#\\text{specials by Alice}]}{k}\n           \\;=\\;\\frac{\\lfloor m/2\\rfloor+1}{m+1}.\n\\]\n\nFinally\n\\[\n   E_A\n   =\\Sigma_s\\;\\frac{\\lfloor m/2\\rfloor+1}{m+1}\n   \\;+\\;\n   \\Sigma_n\\;\\frac{\\lceil m/2\\rceil}{m}.\n\\]\nIf \\(m=0\\) (i.e.\\ all balls are special) then trivially Alice draws them all and Bob 0.\n\nSince we must give the answer\n\\(\\;E_A\\pmod{10^9+7}\\)\nin the form of a fraction \\(P/Q\\) reduced modulo, we precompute all modular inverses up to \\(N=4\\cdot10^5+5\\), then do\n```\n   term_s = Σ_s * (floor(m/2)+1) % MOD * inv[m+1] % MOD\n   term_n = Σ_n * ceil(m/2)       % MOD * inv[m]   % MOD   (if m>0)\n   E_A    = (term_s + term_n) % MOD\n   E_B    = (Σ_s+Σ_n - E_A + MOD) % MOD\n```\n\nThis runs in \\(O(n)\\) total over all testcases (summing \\(n\\le5\\cdot10^5\\)), which is easily under the 2 s limit.\n\n---\n\n```java\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.StringTokenizer;\n\npublic class Main {\n    static final int MOD = 1_000_000_007;\n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(in.readLine());\n        \n        // Precompute inverses up to ~500000\n        int MAX = 500_000 + 5;\n        long[] inv = new long[MAX];\n        inv[1] = 1;\n        for (int i = 2; i < MAX; i++) {\n            // inv[i] = MOD - (MOD/i)*inv[MOD%i] % MOD\n            inv[i] = MOD - ( MOD / i ) * inv[ MOD % i ] % MOD;\n        }\n\n        StringBuilder sb = new StringBuilder();\n        for (int _case = 0; _case < T; _case++) {\n            StringTokenizer st = new StringTokenizer(in.readLine());\n            int n = Integer.parseInt(st.nextToken());\n            int k = Integer.parseInt(st.nextToken());\n            int m = n - k;  // number of normals\n\n            long sumS = 0, sumN = 0;\n            st = new StringTokenizer(in.readLine());\n            for (int i = 0; i < k; i++) {\n                sumS = (sumS + Long.parseLong(st.nextToken())) % MOD;\n            }\n            for (int i = k; i < n; i++) {\n                sumN = (sumN + Long.parseLong(st.nextToken())) % MOD;\n            }\n\n            long alice;\n            if (m == 0) {\n                // all are special => Alice picks all\n                alice = sumS;\n            } else {\n                // p_s = (floor(m/2)+1)/(m+1)\n                long A = (m / 2) + 1;      // floor(m/2)+1\n                long Bs = m + 1;          // denominator m+1\n                long termS = sumS * A % MOD * inv[(int)Bs] % MOD;\n\n                // p_n = ceil(m/2)/m\n                long C = (m + 1) / 2;      // ceil(m/2)\n                long termN = sumN * C % MOD * inv[m] % MOD;\n\n                alice = (termS + termN) % MOD;\n            }\n\n            long total = (sumS + sumN) % MOD;\n            long bob   = (total - alice + MOD) % MOD;\n\n            sb.append(alice).append(' ').append(bob).append('\\n');\n        }\n\n        System.out.print(sb);\n    }\n}\n```\n\n**Explanation of key points**\n\n1.  **Linearity of expectation + symmetry.**  \n    Because each special‐ball is *equally likely* to go into any of the \\((m+1)\\) “special‐bins” in the permutation, and Alice owns exactly those bins numbered \\(0,2,4,\\dots\\), she gets in expectation\n    \\[\n       k\\cdot\\frac{\\lfloor m/2\\rfloor+1}{m+1}\n       \\quad\n       (\\text{specials}),\n       \\quad\n       \\bigl\\lceil\\tfrac m2\\bigr\\rceil\n       \\quad\n       (\\text{normals}).\n    \\]\n    Normal balls are equally likely among themselves, so the expected *sum* of normals she draws is\n    \\(\\sumN\\cdot\\frac{\\lceil m/2\\rceil}{m}.\\)\n\n2.  **Modular inverses.**  \n    We must output the rational expectation \\(E_A\\) in the form \\(P/Q\\pmod{10^9+7}\\).  We precompute \\(\\mathrm{inv}[i]\\equiv i^{-1}\\bmod10^9+7\\) by the standard linear-time sieve:\n    \\[\n       \\mathrm{inv}[1]=1,\\qquad\n       \\mathrm{inv}[i] =   10^9+7 \\;-\\;\\bigl\\lfloor\\frac{10^9+7}{i}\\bigr\\rfloor\n                           \\times \\mathrm{inv}[\\,10^9+7 \\bmod i\\,]\n                           \\;\\bmod\\;(10^9+7).\n    \\]\n    Then each division by \\(m\\) or \\(m+1\\) becomes a multiply by the precomputed inverse.\n\nThis runs in \\(O\\bigl(\\sum n\\bigr)\\le5\\cdot10^5\\) overall, and answers each test in \\(O(n)\\)."
  }
]