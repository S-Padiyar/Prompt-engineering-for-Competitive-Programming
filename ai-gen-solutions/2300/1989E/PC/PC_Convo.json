[
  {
    "timestamp": "2025-07-24T06:13:23.118784",
    "role": "user",
    "content": "Please provide only the Java source code in one block, without Markdown fences or any explanation."
  },
  {
    "timestamp": "2025-07-24T06:14:15.428684",
    "role": "assistant",
    "content": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static final int MOD = 998244353;\n    static int add(int a, int b) {\n        a += b;\n        if (a >= MOD) a -= MOD;\n        return a;\n    }\n    static int sub(int a, int b) {\n        a -= b;\n        if (a < 0) a += MOD;\n        return a;\n    }\n    static int mul(long a, long b) {\n        return (int)((a*b) % MOD);\n    }\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        int k = Integer.parseInt(st.nextToken());\n        int[] a = new int[n+1], S = new int[n+1];\n        a[0] = 1;  S[0] = 1;\n        if (n >= 1) { a[1] = 1; S[1] = 2; }\n        if (n >= 2) { a[2] = 1; S[2] = 3; }\n        for (int i = 3; i <= n; i++) {\n            int val = add(a[i-1], S[i-3]);\n            a[i] = val;\n            S[i] = add(S[i-1], a[i]);\n        }\n        int cn = 1;\n        for (int M = 0; M <= n-2; M++) {\n            int ways = mul(a[M], n-1-M);\n            cn = add(cn, ways);\n        }\n        int maxT = Math.max(1, k-1);\n        int[][] dp2 = new int[maxT+1][n];\n        int[][] dp2sum = new int[maxT+1][n];\n        for (int s = 1; s < n; s++) {\n            dp2[1][s] = 1;\n        }\n        for (int s = 0; s < n; s++) {\n            dp2sum[1][s] = (s==0 ? dp2[1][0] : add(dp2sum[1][s-1], dp2[1][s]));\n        }\n        for (int t = 2; t <= k-1; t++) {\n            int[] cur = new int[n+1], nxt = new int[n+1];\n            cur[0] = 1;\n            for (int pos = 1; pos <= t; pos++) {\n                int[] prefix = new int[n+1];\n                prefix[0] = cur[0];\n                for (int i = 1; i <= n; i++)\n                    prefix[i] = add(prefix[i-1], cur[i]);\n                Arrays.fill(nxt, 0);\n                if (pos < t) {\n                    for (int s = 1; s <= n; s++) {\n                        int ways = prefix[s-1];\n                        if (s-2 >= 0) ways = sub(ways, cur[s-2]);\n                        nxt[s] = ways;\n                    }\n                } else {\n                    for (int s = 1; s <= n; s++) {\n                        nxt[s] = prefix[s-1];\n                    }\n                }\n                int[] tmp = cur; cur = nxt; nxt = tmp;\n            }\n            for (int s = 0; s < n; s++) {\n                dp2[t][s] = cur[s];\n            }\n            dp2sum[t][0] = dp2[t][0];\n            for (int s = 1; s < n; s++) {\n                dp2sum[t][s] = add(dp2sum[t][s-1], dp2[t][s]);\n            }\n        }\n        int dpSmall = 0;\n        dpSmall = add(dpSmall, 1);\n        for (int j = 2; j <= k-1; j++) {\n            dpSmall = add(dpSmall, dp2sum[j-1][n-1]);\n        }\n        int ans = sub(cn, dpSmall);\n        System.out.println(ans);\n    }\n}"
  }
]