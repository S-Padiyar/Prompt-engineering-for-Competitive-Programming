[
    {
        "request_timestamp": "2025-07-23T18:40:12.401750",
        "response_timestamp": "2025-07-23T18:41:23.194318",
        "sent_messages": [
            {
                "role": "user",
                "content": "Codeforces Problem:\n\nE. I Love Balls\n\ntime limit per test2 seconds\n\nmemory limit per test256 megabytes\n\nAlice and Bob are playing a game. There are n\n\n balls, out of which k\n\n are special. Each ball has a value associated with it.\n\n\n\nThe players play turn by turn. In each turn, the player randomly picks a ball and adds the value of the ball to their score, which is 0\n\n at the beginning of the game. The selected ball is removed from the game. If the ball was special, the same player takes the next turn if at least one ball is remaining. If the ball picked was not special, the next player plays their turn.\n\n\n\nThey play this game until no balls are remaining in the game. Alice plays first.\n\n\n\nFind the expected score that both the players have at the end of the game modulo 109+7\n\n.\n\n\n\nFormally, let M=109+7\n\n. It can be shown that the answer can be expressed as an irreducible fraction pq\n\n, where p\n\n and q\n\n are integers and q≢0(modM)\n\n. Output the integer equal to p⋅q−1modM\n\n. In other words, output such an integer x\n\n that 0≤x<M\n\n and x⋅q≡p(modM)\n\n.\n\n\n\nInput\n\nThere are multiple test cases. The first line of the input contains an integer t\n\n, the number of test cases (1≤t≤2⋅105\n\n).\n\n\n\nEach test case description is on a new line. The first line of the test case contains two integers n\n\n and k\n\n in the respective order separated by a space (1≤k≤n≤4⋅105\n\n).\n\n\n\nThe second line of the test case contains n\n\n integers: v1,v2,…,vn\n\n, the value for each ball separated by spaces. The first k\n\n balls are special (1≤vi≤107\n\n).\n\n\n\nThe sum of n\n\n over all test cases does not exceed 5⋅105\n\n.\n\n\n\nOutput\n\nOutput two integers per test case in a new line, the expected score of Alice and the expected score of Bob modulo 109+7\n\n.\n\n\n\nExamples\n\nInputCopy\n\n1\n\n5 2\n\n10 20 5 15 25\n\nOutputCopy\n\n45 30\n\nInputCopy\n\n5\n\n1 1\n\n732507\n\n2 2\n\n5817860 5398510\n\n5 1\n\n2122894 4951549 2750585 7821535 3214167\n\n8 4\n\n1405323 5069867 6883092 6972029 328406 2478975 7628890 9973340\n\n4 2\n\n9662050 3566134 3996473 9872255\n\nOutputCopy\n\n732507 0\n\n11216370 0\n\n810642660 210218077\n\n722402997 318336932\n\n349086489 678010430\n\nInputCopy\n\n5\n\n3 3\n\n1095611 8219204 7773462\n\n2 1\n\n8176490 2774103\n\n3 1\n\n9178636 5138057 3367761\n\n12 9\n\n7597698 6843019 2298534 1522386 4969588 1340345 3967362 9152890 6689668 9986080 4745473 7407325\n\n10 5\n\n6986368 2397882 5804127 6980694 3740836 3215836 5195724 3179261 4136769 4544231\n\nOutputCopy\n\n17088277 0\n\n6862348 4088245\n\n677038671 340645790\n\n36949997 29570371\n\n725118051 321063684\n\nNote\n\nIn the first test case, Alice's expected score is 45\n\n, and Bob's is 30\n\n at the end of the game.\n\n---\n\nUse Java."
            }
        ],
        "received_response": "{\n  \"id\": \"chatcmpl-BwcQ8HXq4XY2DngHIyfDzzuD27Huz\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"**Analysis**\\n\\nWe have \\\\(n\\\\) balls, of which \\\\(k\\\\) are _special_ and the remaining \\\\(N=n-k\\\\) are _non-special_.  Each ball \\\\(i\\\\) has a value \\\\(v_i\\\\).  Two players, Alice and Bob, alternately draw balls _at random_ (uniformly from those remaining) and add the drawn ball’s value to their own score.  The special rule is:\\n\\n- If a player draws a **special** ball, that same player goes again immediately (does **not** switch).\\n- If a player draws a **non-special** ball, the turn switches.\\n\\nWe want the **expected** total score of Alice and of Bob at the end.  Since expectation is linear, one can show that\\n\\n1.  The sequence of all \\\\(n\\\\) draws is (in distribution) a uniform random permutation of the \\\\(n\\\\) balls.\\n2.  Which player makes the \\\\(j\\\\)-th draw depends only on how many non-specials (toggles) have occurred before that draw, namely on the parity of the number of non-specials drawn so far.\\n3.  Hence each draw is assigned to Alice or Bob according to a simple parity rule, and by symmetry **every ball** has the same _probability_ of going to Alice (resp.\\\\ Bob), independent of its value or whether it is special or not.  \\n\\nIt follows that the expected total value Alice collects is\\n\\n\\\\[\\n   \\\\Bigl(\\\\mathbb{E}[\\\\text{# of draws Alice makes}]\\\\Bigr)\\\\times\\n   \\\\frac{\\\\text{(total sum of all values)}}{n}\\\\,,\\n\\\\]\\n\\nand similarly for Bob.  So it remains only to compute\\n\\\\[\\n   E_{\\\\!A}=\\\\mathbb{E}[\\\\#\\\\text{ of draws Alice makes}]\\n   \\\\quad\\\\text{and}\\\\quad\\n   E_{\\\\!B} = n - E_{\\\\!A}.\\n\\\\]\\n\\nLet \\\\(N=n-k\\\\) be the number of non-special balls.  Every time a non-special is drawn, control toggles.  Hence the entire game can be partitioned into \\\\(N+1\\\\) _segments_ (stretches of consecutive draws by the same player), namely each segment ends with a non-special draw except possibly the last one.  These \\\\(N+1\\\\) segments alternate between Alice and Bob, starting with Alice.  Of the \\\\(N\\\\) non-special balls exactly \\\\(\\\\lceil N/2\\\\rceil\\\\) of them end up being drawn by Alice (those in \\\"odd-numbered\\\" segments).\\n\\nThe \\\\(k\\\\) special balls are scattered uniformly at random among the \\\\(N+1\\\\) segments.  Thus the expected number of special-ball draws _in_ Alice’s segments is\\n\\\\[\\n   k \\\\times \\\\frac{\\\\#\\\\{\\\\text{Alice segments}\\\\}}{N+1}\\n   = k \\\\times \\\\frac{\\\\lceil (N+1)/2\\\\rceil}{\\\\,N+1\\\\,}.\\n\\\\]\\n\\nHence\\n\\\\[\\n   E_{A}\\n   = \\\\underbrace{\\\\lceil N/2\\\\rceil}_{\\\\text{Alice’s non-special draws}}\\n   \\\\;+\\\\;\\\\underbrace{k\\\\;\\\\frac{\\\\lceil (N+1)/2\\\\rceil}{N+1}}_{\\\\text{Alice’s special draws}}.\\n\\\\]\\nSince each draw (special or not) is worth on average\\n\\\\(\\\\tfrac{1}{n}\\\\times(\\\\text{sum of all values})\\\\),\\nthe expected total score of Alice is\\n\\\\[\\n   \\\\mathbb{E}[\\\\text{Alice’s score}]\\n   = \\\\bigl(\\\\tfrac{E_{A}}{\\\\,n\\\\,}\\\\bigr)\\\\times\\n     \\\\bigl(\\\\sum_{i=1}^n v_i\\\\bigr),\\n\\\\]\\nand Bob’s is the remainder.\\n\\nAll of this is entirely explicit in \\\\(\\\\!O(1)\\\\) per test once we know\\n\\\\[\\n   N=n-k,\\\\quad\\n   c_1=\\\\lceil N/2\\\\rceil=\\\\Bigl\\\\lfloor\\\\frac{N+1}{2}\\\\Bigr\\\\rfloor,\\\\quad\\n   s=\\\\lceil\\\\frac{N+1}{2}\\\\rceil=\\\\Bigl\\\\lfloor\\\\frac{N+2}{2}\\\\Bigr\\\\rfloor.\\n\\\\]\\nIn modular arithmetic (mod \\\\(10^9+7\\\\)), we compute\\n\\\\[\\n   \\\\begin{aligned}\\n   A_{\\\\rm num}&=c_1\\\\,(N+1)\\\\;+\\\\;k\\\\,s\\n     \\\\quad\\\\bigl(\\\\,\\\\equiv E_{A}\\\\times(N+1)\\\\bigr),\\\\\\\\\\n   \\\\text{AliceScore}\\n   &=\\\\Bigl(\\\\sum v_i\\\\Bigr)\\\\;\\\\times\\\\;A_{\\\\rm num}\\\\;\\\\times\\\\;\\n     \\\\bigl[(N+1)^{-1}\\\\bigr]\\\\;\\\\times\\\\;(n^{-1})\\n     \\\\pmod{10^9+7},\\\\\\\\\\n   \\\\text{BobScore}&=\\n     \\\\Bigl(\\\\sum v_i\\\\Bigr)\\\\;-\\\\;\\\\text{AliceScore}\\\\pmod{10^9+7}.\\n   \\\\end{aligned}\\n\\\\]\\nWe only need fast modular inverses of all integers up to \\\\(\\\\max n+1\\\\), which\\nwe precompute in \\\\(\\\\!O(\\\\max n)\\\\).  Each test then runs in \\\\(\\\\!O(n)\\\\) to\\nsum the \\\\(v_i\\\\) plus \\\\(\\\\!O(1)\\\\) more work, for a total \\\\(\\\\!O(\\\\sum n)\\\\)\\noverall.\\n\\n---\\n\\n```java\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    static final int MOD = 1_000_000_007;\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        int t = Integer.parseInt(br.readLine().trim());\\n\\n        int[] n = new int[t], k = new int[t];\\n        long[] sum = new long[t];\\n        int maxN = 0;\\n\\n        // Read all test cases, record sums and track max n\\n        for (int i = 0; i < t; i++) {\\n            StringTokenizer st = new StringTokenizer(br.readLine());\\n            n[i] = Integer.parseInt(st.nextToken());\\n            k[i] = Integer.parseInt(st.nextToken());\\n            maxN = Math.max(maxN, n[i]);\\n            st = new StringTokenizer(br.readLine());\\n            long s = 0;\\n            for (int j = 0; j < n[i]; j++) {\\n                s = (s + Integer.parseInt(st.nextToken())) % MOD;\\n            }\\n            sum[i] = s;\\n        }\\n\\n        // Precompute modular inverses up to maxN+1\\n        int maxInv = maxN + 1;\\n        long[] inv = new long[maxInv + 1];\\n        inv[1] = 1;\\n        for (int i = 2; i <= maxInv; i++) {\\n            inv[i] = MOD - (MOD / i) * inv[MOD % i] % MOD;\\n        }\\n\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = 0; i < t; i++) {\\n            int ni = n[i], ki = k[i];\\n            long Si = sum[i];\\n\\n            int N = ni - ki;  // # non-special\\n            // c1 = ceil(N/2) = floor((N+1)/2)\\n            long c1 = (N + 1L) / 2;\\n            // s = ceil((N+1)/2) = floor((N+2)/2)\\n            long s  = (N + 2L) / 2;\\n            long den = (N + 1L) % MOD; \\n\\n            // A_num = c1*(N+1) + k*s  (mod MOD)\\n            long A_num = (c1 * den + ki * s) % MOD;\\n\\n            // Alice's expected sum:\\n            //   = Si * A_num * inv[N+1] * inv[n]  (all mod MOD)\\n            long alice = Si % MOD;\\n            alice = alice * A_num % MOD;\\n            alice = alice * inv[(int)den] % MOD;\\n            alice = alice * inv[ni] % MOD;\\n\\n            // Bob gets the rest\\n            long bob = (Si - alice + MOD) % MOD;\\n\\n            sb.append(alice).append(\\\" \\\").append(bob).append(\\\"\\\\n\\\");\\n        }\\n\\n        System.out.print(sb);\\n    }\\n}\\n```\\n\\n**Explanation of key steps**\\n\\n1.  **Permutation & toggles.**  Drawing without replacement in random order is equivalent to a random permutation.  A “toggle” happens exactly when a non-special is drawn.  Thus the turn on draw \\\\(j\\\\) is determined by the parity of the number of non-specials among the first \\\\(j-1\\\\) draws.\\n\\n2.  **Counting segments.**  Each non-special ends a “run” of consecutive draws by the same player; there are \\\\(N+1\\\\) such runs in total, alternating between Alice and Bob, starting with Alice.\\n\\n3.  **Uniform scatter of specials.**  The \\\\(k\\\\) special balls are placed uniformly across the \\\\(N+1\\\\) runs, so Alice expects \\\\(k\\\\cdot\\\\frac{\\\\lceil (N+1)/2\\\\rceil}{N+1}\\\\) of them.  She also _surely_ gets exactly \\\\(\\\\lceil N/2\\\\rceil\\\\) of the non-specials, namely those in her “odd-numbered” runs.\\n\\n4.  **Linear expectation.**  Since each drawn ball has its value added to whoever drew it, the total expected score of Alice is\\n   \\\\[\\n     \\\\bigl(\\\\text{expected \\\\# draws by Alice}\\\\bigr)\\\\times \\n     \\\\frac{\\\\sum_i v_i}{n}.\\n   \\\\]\\n   The same for Bob, who takes the remainder of the total sum.\\n\\n5.  **Modular arithmetic.**  We precompute inverses \\\\(1^{-1},2^{-1},\\\\dots\\\\) up to \\\\(\\\\max n+1\\\\) via\\n   \\\\[\\n     \\\\mathrm{inv}[i] = (-\\\\,\\\\lfloor M/i\\\\rfloor) \\\\cdot \\\\mathrm{inv}[M \\\\bmod i]\\\\;\\\\bmod M,\\n   \\\\]\\n   and then plug in the closed‐form expression in \\\\(\\\\!O(1)\\\\) time per test (after summing the \\\\(n\\\\) values).\\n\\nThis solves each test in \\\\(\\\\!O(n)\\\\) for summing the input plus \\\\(\\\\!O(1)\\\\) extra, comfortably within the overall \\\\(\\\\!O(\\\\sum n)\\\\le5\\\\cdot10^5\\\\) bound.\",\n        \"refusal\": null,\n        \"role\": \"assistant\",\n        \"annotations\": [],\n        \"audio\": null,\n        \"function_call\": null,\n        \"tool_calls\": null\n      },\n      \"content_filter_results\": {\n        \"hate\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"protected_material_code\": {\n          \"filtered\": false,\n          \"detected\": false\n        },\n        \"protected_material_text\": {\n          \"filtered\": false,\n          \"detected\": false\n        },\n        \"self_harm\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"sexual\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"violence\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        }\n      }\n    }\n  ],\n  \"created\": 1753310412,\n  \"model\": \"o4-mini-2025-04-16\",\n  \"object\": \"chat.completion\",\n  \"service_tier\": null,\n  \"system_fingerprint\": null,\n  \"usage\": {\n    \"completion_tokens\": 11738,\n    \"prompt_tokens\": 849,\n    \"total_tokens\": 12587,\n    \"completion_tokens_details\": {\n      \"accepted_prediction_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"reasoning_tokens\": 9408,\n      \"rejected_prediction_tokens\": 0\n    },\n    \"prompt_tokens_details\": {\n      \"audio_tokens\": 0,\n      \"cached_tokens\": 0\n    }\n  },\n  \"prompt_filter_results\": [\n    {\n      \"prompt_index\": 0,\n      \"content_filter_results\": {\n        \"hate\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"jailbreak\": {\n          \"filtered\": false,\n          \"detected\": false\n        },\n        \"self_harm\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"sexual\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"violence\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        }\n      }\n    }\n  ]\n}"
    }
]