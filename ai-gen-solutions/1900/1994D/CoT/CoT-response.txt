**Analysis**

We have \(n\) vertices labeled \(1\ldots n\), an array of values \(a_1,\dots,a_n\), and we must perform exactly \(n-1\) operations indexed \(x=1\ldots n-1\).  In the \(x\)-th operation we must choose two distinct vertices \(u,v\) such that
\[
\bigl|a_u - a_v\bigr| \;\equiv\;0 \pmod{x},
\]
and add the undirected edge \((u,v)\).  After all \(n-1\) operations, the resulting graph must be connected.  If it is impossible, we must print “No”; otherwise we print “Yes” and one edge \((u_x,v_x)\) for each \(x\) in order.

A clean way to guarantee connectivity is to build a star centered at a single “root” vertex \(r\).  Suppose we pick the vertex \(r\) whose \(a_r\) is minimal (any fixed choice of one vertex would do).  Then we only ever add edges of the form \((r,i)\) for \(i\neq r\).  This will certainly produce a connected graph (in fact a star).  

What remains is to assign *each* operation-index \(x=1\ldots n-1\) to *one* distinct “other” vertex \(i\neq r\), so that
\[
|a_i - a_r|\;\bigr|\;x,
\]
i.e.\ \(x\) divides \(\bigl|a_i - a_r\bigr|\).  We have exactly \(n-1\) other vertices \(i\), and we have exactly \(n-1\) operation-indices \(x\).  Thus we need a *perfect matching* in the bipartite graph

- Left side \(X = \{1,2,\dots,n-1\}\) (the operation-indices).
- Right side \(I = \{\) the \(n-1\) vertices other than \(r\}\).
- Put an edge \((x,i)\) if and only if \(x\) divides \(\bigl|a_i - a_r\bigr|\).

If we find a perfect matching \(x\mapsto i\), then in operation \(x\) we connect \((r,i)\).  That uses each \(x\) exactly once, connects to a distinct \(i\neq r\), and so yields a star graph which is connected and satisfies all divisibility constraints.

We can find a bipartite perfect matching in \(O(V\cdot E)\) time by the classic “Kuhn” (DFS‐based) algorithm, or if you prefer, Hopcroft–Karp in \(O(E\sqrt V)\).  Since \(n\le2000\) in total, a well‐written Kuhn will pass easily.

**Implementation (Java)**

```java
import java.io.*;
import java.util.*;

public class Main {
    static int n;
    static long[] a;
    // adj[x] = list of right‐side nodes j that x can match to
    static ArrayList<Integer>[] adj;
    // matchL[x] = matched right‐node for left‐node x  (or -1)
    // matchR[j] = matched left‐node for right‐node j (or -1)
    static int[] matchL, matchR;
    static boolean[] seen;  // for DFS on right side

    // Try to find augmenting path starting from left‐node x
    static boolean dfs(int x) {
        for (int j : adj[x]) {
            if (seen[j]) continue;
            seen[j] = true;
            // either j is free, or we can re-route its current match
            if (matchR[j] == -1 || dfs(matchR[j])) {
                matchL[x] = j;
                matchR[j] = x;
                return true;
            }
        }
        return false;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out = new PrintWriter(System.out);

        int t = Integer.parseInt(br.readLine().trim());
        while (t-- > 0) {
            n = Integer.parseInt(br.readLine().trim());
            a = new long[n];
            StringTokenizer st = new StringTokenizer(br.readLine());
            for (int i = 0; i < n; i++) {
                a[i] = Long.parseLong(st.nextToken());
            }
            // If n=1, no edges needed, always connected trivially
            if (n == 1) {
                out.println("Yes");
                continue;
            }

            // 1) Pick r = index of minimal a[i]
            int r = 0;
            for (int i = 1; i < n; i++) {
                if (a[i] < a[r]) r = i;
            }

            // 2) Build list of the other n-1 vertices
            int M = n - 1;
            int[] ids = new int[M]; // ids[j] = original vertex index for right‐node j
            {
                int ptr = 0;
                for (int i = 0; i < n; i++) {
                    if (i == r) continue;
                    ids[ptr++] = i;
                }
            }

            // 3) Build adjacency for x=1..M
            adj = new ArrayList[M+1];
            for (int x = 1; x <= M; x++) {
                adj[x] = new ArrayList<>();
            }
            for (int j = 0; j < M; j++) {
                long diff = Math.abs(a[ids[j]] - a[r]);
                // For each x in [1..M], if x divides diff, add edge
                // (We could factor diff, but for M<=2000 a simple loop is fine.)
                for (int x = 1; x <= M; x++) {
                    if (diff % x == 0) {
                        adj[x].add(j);
                    }
                }
            }

            // 4) Try to find a perfect matching from {1..M} -> {right‐nodes}
            matchL = new int[M+1];
            matchR = new int[M];
            Arrays.fill(matchL, -1);
            Arrays.fill(matchR, -1);

            boolean ok = true;
            // We can improve speed by sorting x's by increasing adjacency size
            Integer[] ops = new Integer[M];
            for (int i = 0; i < M; i++) ops[i] = i+1;
            Arrays.sort(ops, Comparator.comparingInt(x -> adj[x].size()));

            for (int x : ops) {
                seen = new boolean[M];
                if (!dfs(x)) {
                    ok = false;
                    break;
                }
            }

            if (!ok) {
                out.println("No");
            } else {
                out.println("Yes");
                // We must print the edges in order x=1..M
                // operation x connects (r, ids[ matchL[x] ])
                for (int x = 1; x <= M; x++) {
                    int j = matchL[x];
                    int v = ids[j];
                    // +1 to convert 0-based to 1-based
                    out.printf("%d %d\n", r+1, v+1);
                }
            }
        }
        out.flush();
    }
}
```

**Explanation of the Key Steps**

1. **Root choice**  
   We pick a single vertex `r` (e.g.\ the one with smallest `a[r]`) that will serve as the center of our star.  Every edge we add will be of the form \((r,i)\).

2. **Bipartite graph**  
   - Left side nodes are the operation‐indices \(x=1\ldots n-1\).  
   - Right side nodes are the \(n-1\) other vertices \(i\neq r\).  
   - We put an edge \((x,i)\) if and only if
     \[
       x \;|\;\bigl|a_i - a_r\bigr|.
     \]
   Finding a *perfect matching* in this bipartite graph ensures that each \(x\) is matched to exactly one distinct \(i\).

3. **Kuhn’s algorithm (DFS‐based matching)**  
   We run a DFS‐based bipartite matcher (“Kuhn”) attempting to match each left node \(x\).  If all left nodes can be matched, we have our perfect matching.

4. **Building the answer**  
   If matching succeeds, for each \(x=1\ldots n-1\) we look up which vertex \(i\) it is matched to, say `matchL[x] = j`, and then print the edge
   \[
     (r,\; \text{ids}[j])
   \]
   in the \(x\)-th operation.  This forms a star around `r` and uses each operation‐index exactly once in a valid way.

If at any point we fail to find a perfect matching, we output “No”.

This runs in \(O(n\cdot n)\) to build the adjacency (since \(n\le2000\)), and the DFS‐matching is in practice fast enough for \(n\le2000\) in Java.