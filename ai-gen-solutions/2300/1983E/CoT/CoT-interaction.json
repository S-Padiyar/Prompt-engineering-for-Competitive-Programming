[
    {
        "request_timestamp": "2025-07-23T18:41:23.299687",
        "response_timestamp": "2025-07-23T18:43:03.699799",
        "sent_messages": [
            {
                "role": "user",
                "content": "Codeforces Problem:\n\nE. I Love Balls\n\ntime limit per test2 seconds\n\nmemory limit per test256 megabytes\n\nAlice and Bob are playing a game. There are n\n\n balls, out of which k\n\n are special. Each ball has a value associated with it.\n\n\n\nThe players play turn by turn. In each turn, the player randomly picks a ball and adds the value of the ball to their score, which is 0\n\n at the beginning of the game. The selected ball is removed from the game. If the ball was special, the same player takes the next turn if at least one ball is remaining. If the ball picked was not special, the next player plays their turn.\n\n\n\nThey play this game until no balls are remaining in the game. Alice plays first.\n\n\n\nFind the expected score that both the players have at the end of the game modulo 109+7\n\n.\n\n\n\nFormally, let M=109+7\n\n. It can be shown that the answer can be expressed as an irreducible fraction pq\n\n, where p\n\n and q\n\n are integers and q≢0(modM)\n\n. Output the integer equal to p⋅q−1modM\n\n. In other words, output such an integer x\n\n that 0≤x<M\n\n and x⋅q≡p(modM)\n\n.\n\n\n\nInput\n\nThere are multiple test cases. The first line of the input contains an integer t\n\n, the number of test cases (1≤t≤2⋅105\n\n).\n\n\n\nEach test case description is on a new line. The first line of the test case contains two integers n\n\n and k\n\n in the respective order separated by a space (1≤k≤n≤4⋅105\n\n).\n\n\n\nThe second line of the test case contains n\n\n integers: v1,v2,…,vn\n\n, the value for each ball separated by spaces. The first k\n\n balls are special (1≤vi≤107\n\n).\n\n\n\nThe sum of n\n\n over all test cases does not exceed 5⋅105\n\n.\n\n\n\nOutput\n\nOutput two integers per test case in a new line, the expected score of Alice and the expected score of Bob modulo 109+7\n\n.\n\n\n\nExamples\n\nInputCopy\n\n1\n\n5 2\n\n10 20 5 15 25\n\nOutputCopy\n\n45 30\n\nInputCopy\n\n5\n\n1 1\n\n732507\n\n2 2\n\n5817860 5398510\n\n5 1\n\n2122894 4951549 2750585 7821535 3214167\n\n8 4\n\n1405323 5069867 6883092 6972029 328406 2478975 7628890 9973340\n\n4 2\n\n9662050 3566134 3996473 9872255\n\nOutputCopy\n\n732507 0\n\n11216370 0\n\n810642660 210218077\n\n722402997 318336932\n\n349086489 678010430\n\nInputCopy\n\n5\n\n3 3\n\n1095611 8219204 7773462\n\n2 1\n\n8176490 2774103\n\n3 1\n\n9178636 5138057 3367761\n\n12 9\n\n7597698 6843019 2298534 1522386 4969588 1340345 3967362 9152890 6689668 9986080 4745473 7407325\n\n10 5\n\n6986368 2397882 5804127 6980694 3740836 3215836 5195724 3179261 4136769 4544231\n\nOutputCopy\n\n17088277 0\n\n6862348 4088245\n\n677038671 340645790\n\n36949997 29570371\n\n725118051 321063684\n\nNote\n\nIn the first test case, Alice's expected score is 45\n\n, and Bob's is 30\n\n at the end of the game.\n\n---\n\nLet's think step-by-step so we don't make mistakes. Use Java. Avoid syntax errors or infinite loops."
            }
        ],
        "received_response": "{\n  \"id\": \"chatcmpl-BwcRHZyjJAJl94Q4PdtvPPPTwWFQD\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"**Analysis**\\n\\nWe have \\\\(n\\\\) balls, of which the first \\\\(k\\\\) are \\\"special\\\" and the remaining \\\\(M=n-k\\\\) are \\\"non‐special.\\\"  Each ball \\\\(i\\\\) carries a value \\\\(v_i\\\\).  Alice and Bob take turns drawing balls uniformly at random without replacement; whenever one draws a special ball, that same player draws again, and whenever one draws a non‐special ball, play passes to the other.  We wish to compute\\n\\n\\\\[\\n  E_A=\\\\mathbb{E}[\\\\text{Alice's final score}],\\\\quad\\n  E_B=\\\\mathbb{E}[\\\\text{Bob's final score}],\\n\\\\]\\n\\nall arithmetic done modulo \\\\(10^9+7\\\\).\\n\\n---\\n\\n**Key observations**\\n\\n1.  **Linearity of expectation**, plus symmetry among balls of the same type:\\n\\n   Let\\n   \\\\[\\n     S_{\\\\rm sp}=\\\\sum_{i=1}^k v_i,\\\\qquad\\n     S_{\\\\rm ns}=\\\\sum_{i=k+1}^n v_i,\\\\qquad\\n     S=S_{\\\\rm sp}+S_{\\\\rm ns}.\\n   \\\\]\\n   By symmetry, all special balls have the same probability \\\\(P_{\\\\rm sp}\\\\) of ending up in Alice's pile, and all non‐special balls have the same probability \\\\(P_{\\\\rm ns}\\\\) of ending up in Alice's pile.  Hence\\n   \\\\[\\n     E_A\\n     = P_{\\\\rm sp}\\\\,S_{\\\\rm sp}\\\\;+\\\\;P_{\\\\rm ns}\\\\,S_{\\\\rm ns},\\n     \\\\qquad\\n     E_B = S - E_A.\\n   \\\\]\\n\\n2.  **Computing** \\\\(P_{\\\\rm sp}\\\\) and \\\\(P_{\\\\rm ns}\\\\):\\n\\n   -  Fix one special ball.  Consider the \\\\(M\\\\) non‐special balls alone plus that one special ball; in a random permutation of these \\\\(M+1\\\\) items, our special ball is equally likely to occupy any of the \\\\(M+1\\\\) positions among the non‐specials.  If it ends up with \\\\(e\\\\) non‐specials to its left, then by the game‐rules Alice will be the player to draw it precisely if \\\\(e\\\\) is even.  Hence\\n   \\\\[\\n     P_{\\\\rm sp}\\n     = \\\\Pr\\\\bigl(e\\\\text{ is even}\\\\bigr)\\n     = \\\\frac{\\\\#\\\\{0\\\\le e\\\\le M: e\\\\text{ even}\\\\}}{M+1}\\n     = \\\\frac{\\\\lfloor M/2\\\\rfloor+1}{M+1}.\\n   \\\\]\\n   -  Fix one non‐special ball.  Now look only at the other \\\\(M-1\\\\) non‐specials; in a random permutation among these \\\\(M\\\\) non‐specials, our chosen ball is equally likely at any of the \\\\(M\\\\) positions.  If it has \\\\(e\\\\) of the other non‐specials before it, then the number of switches that have occurred is exactly \\\\(e\\\\), so Alice draws it iff \\\\(e\\\\) is even.  Hence\\n   \\\\[\\n     P_{\\\\rm ns}\\n     = \\\\frac{\\\\#\\\\{0\\\\le e\\\\le M-1: e\\\\text{ even}\\\\}}{M}\\n     = \\\\frac{\\\\lceil M/2\\\\rceil}{M}\\n     = \\\\frac{\\\\lfloor (M+1)/2\\\\rfloor}{M}.\\n   \\\\]\\n   (When \\\\(M=0\\\\) there are no non‐specials; in that degenerate case Alice draws all specials, so \\\\(P_{\\\\rm sp}=1\\\\) and \\\\(P_{\\\\rm ns}\\\\) never enters the formula.)\\n\\n3.  **Putting it all together.**  We compute\\n   \\\\[\\n     E_A\\n     = P_{\\\\rm sp}\\\\,S_{\\\\rm sp} \\\\;+\\\\; P_{\\\\rm ns}\\\\,S_{\\\\rm ns}\\n     \\\\pmod{10^9+7}, \\n     \\\\quad\\n     E_B = (S - E_A)\\\\bmod 10^9+7.\\n   \\\\]\\n   Each of \\\\(P_{\\\\rm sp}\\\\) and \\\\(P_{\\\\rm ns}\\\\) is a small rational number with denominator at most \\\\(n\\\\), so we precompute modular inverses up to \\\\(n\\\\) in \\\\(O(n)\\\\), and then do each test in \\\\(O(n)\\\\) to read the values plus \\\\(O(1)\\\\) for the formula.\\n\\nOverall complexity is \\\\(O(N_{\\\\max}+ \\\\sum n)\\\\), where \\\\(N_{\\\\max}\\\\) is the maximum \\\\(n\\\\) across all tests (up to about \\\\(5\\\\cdot10^5\\\\)), which easily fits under the time limit.\\n\\n---\\n\\n```java\\nimport java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    static final int MOD = 1_000_000_007;\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n        StringTokenizer tok;\\n\\n        int t = Integer.parseInt(in.readLine());\\n        // We may have sum of all n up to ~5e5, so we precompute inverses up to that.\\n        int MAXN = 500_000 + 5;\\n        int[] inv = new int[MAXN];\\n        inv[1] = 1;\\n        for (int i = 2; i < MAXN; i++) {\\n            // inv[i] = MOD - (MOD/i)*inv[MOD%i] mod MOD\\n            inv[i] = (int) ( (long)(MOD - MOD/i) * inv[MOD % i] % MOD );\\n        }\\n\\n        while (t-- > 0) {\\n            tok = new StringTokenizer(in.readLine());\\n            int n = Integer.parseInt(tok.nextToken());\\n            int k = Integer.parseInt(tok.nextToken());\\n            int M = n - k; // number of non-special\\n\\n            long sumSp = 0, sumNs = 0;\\n            tok = new StringTokenizer(in.readLine());\\n            for (int i = 0; i < k; i++) {\\n                sumSp = (sumSp + Integer.parseInt(tok.nextToken())) % MOD;\\n            }\\n            for (int i = k; i < n; i++) {\\n                sumNs = (sumNs + Integer.parseInt(tok.nextToken())) % MOD;\\n            }\\n\\n            long ansA;\\n            if (M == 0) {\\n                // No non-specials: Alice gets all special balls\\n                ansA = sumSp;\\n            } else {\\n                // P_sp = (floor(M/2)+1)/(M+1)\\n                long cntEven = (M/2) + 1; \\n                long Psp = cntEven * inv[M+1] % MOD;\\n\\n                // P_ns = floor((M+1)/2)/M\\n                long cntHalf = ((M + 1L) / 2L);\\n                long Pns = cntHalf * inv[M] % MOD;\\n\\n                ansA = (Psp * sumSp + Pns * sumNs) % MOD;\\n            }\\n\\n            long total = (sumSp + sumNs) % MOD;\\n            long ansB = (total - ansA + MOD) % MOD;\\n\\n            System.out.println(ansA + \\\" \\\" + ansB);\\n        }\\n    }\\n}\\n```\\n\\n**Explanation of the core steps**\\n\\n1. **Reading Input & Precompute**  \\n   We read \\\\(t\\\\) test cases, sum of all \\\\(n\\\\) up to \\\\(5\\\\cdot10^5\\\\).  We precompute modular inverses \\\\(\\\\mathsf{inv}[i]\\\\equiv i^{-1}\\\\pmod{10^9+7}\\\\) for \\\\(1\\\\le i<5\\\\cdot10^5\\\\) in \\\\(O(N)\\\\) time via the standard linear‐time recurrence\\n   \\\\[\\n     \\\\mathsf{inv}[i]\\n       = \\\\bigl(MOD - (MOD/i)\\\\bigr)\\\\times\\\\mathsf{inv}[\\\\,MOD \\\\bmod i\\\\,]\\\\;\\\\bmod\\\\;MOD.\\n   \\\\]\\n\\n2. **Summing special vs non‐special**  \\n   For each test we sum the first \\\\(k\\\\) values into `sumSp` and the remaining \\\\(M=n-k\\\\) values into `sumNs`.\\n\\n3. **Computing \\\\(P_{\\\\rm sp},P_{\\\\rm ns}\\\\)**  \\n   -  \\\\(P_{\\\\rm sp} = \\\\dfrac{\\\\lfloor M/2\\\\rfloor + 1}{M+1}\\\\):  among the \\\\(M+1\\\\) relative positions of our special ball among the \\\\(M\\\\) non‐specials, exactly those with an *even* number of non‐specials to the left (from 0 up to \\\\(\\\\lfloor M/2\\\\rfloor\\\\)) go to Alice.\\n   -  \\\\(P_{\\\\rm ns} = \\\\dfrac{\\\\lfloor (M+1)/2\\\\rfloor}{M}\\\\):  among the \\\\(M\\\\) non‐special balls, a given non‐special has \\\\(\\\\lfloor (M+1)/2\\\\rfloor\\\\) chances out of \\\\(M\\\\) to have an even count of earlier non‐specials.\\n\\n4. **Final expected values**  \\n   By symmetry\\n   \\\\[\\n     E_A = P_{\\\\rm sp}\\\\times S_{\\\\rm sp}\\\\;+\\\\;P_{\\\\rm ns}\\\\times S_{\\\\rm ns}, \\n     \\\\quad\\n     E_B = S - E_A,\\n   \\\\]\\n   all mod \\\\(10^9+7\\\\).  In the edge case \\\\(M=0\\\\) there are no non‐specials, so Alice simply draws all the \\\\(k\\\\) specials, and Bob gets zero.\\n\\nThis solves each test in \\\\(O(n)\\\\) time (just to read the values and do a few modular multiplications), well within the 2-second limit for up to \\\\(5\\\\times10^5\\\\) total balls.\",\n        \"refusal\": null,\n        \"role\": \"assistant\",\n        \"annotations\": [],\n        \"audio\": null,\n        \"function_call\": null,\n        \"tool_calls\": null\n      },\n      \"content_filter_results\": {\n        \"hate\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"protected_material_code\": {\n          \"filtered\": false,\n          \"detected\": false\n        },\n        \"protected_material_text\": {\n          \"filtered\": false,\n          \"detected\": false\n        },\n        \"self_harm\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"sexual\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"violence\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        }\n      }\n    }\n  ],\n  \"created\": 1753310483,\n  \"model\": \"o4-mini-2025-04-16\",\n  \"object\": \"chat.completion\",\n  \"service_tier\": null,\n  \"system_fingerprint\": null,\n  \"usage\": {\n    \"completion_tokens\": 16657,\n    \"prompt_tokens\": 867,\n    \"total_tokens\": 17524,\n    \"completion_tokens_details\": {\n      \"accepted_prediction_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"reasoning_tokens\": 14528,\n      \"rejected_prediction_tokens\": 0\n    },\n    \"prompt_tokens_details\": {\n      \"audio_tokens\": 0,\n      \"cached_tokens\": 0\n    }\n  },\n  \"prompt_filter_results\": [\n    {\n      \"prompt_index\": 0,\n      \"content_filter_results\": {\n        \"hate\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"jailbreak\": {\n          \"filtered\": false,\n          \"detected\": false\n        },\n        \"self_harm\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"sexual\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        },\n        \"violence\": {\n          \"filtered\": false,\n          \"severity\": \"safe\"\n        }\n      }\n    }\n  ]\n}"
    }
]